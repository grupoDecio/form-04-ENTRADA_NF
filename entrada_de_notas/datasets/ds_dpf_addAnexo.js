function createDataset(fields, constraints, sortFields) { log.info("Digte Public Form - @@@ Inicio Dataset ds_dpf_addAnexo.js"); var dataset = DatasetBuilder.newDataset(); var user = ""; var password = ""; var company = getValue("WKCompany"); var processInstanceId = ""; var atividadeDestino = ""; var userSolicitante = ""; var cardData = []; var attachments = []; var serverUrl = ""; var threadSequence = ""; var codigoFormularioPublico = ""; var datasetFormulario = ""; var idFormularioConfiguracoes = ""; var tempImgFolder = ""; var userLocale = 'pt_BR'; var isIdentityEnabled = ""; if (constraints != null) { for (var i = 0; i < constraints.length; i++) { if (constraints[i].fieldName == "a") { attachments.push(JSON.parse(constraints[i].initialValue)); /*Ex.: {'fileName':'file1.txt', 'description': 'Arquivo'} */ } else if (constraints[i].fieldName == "su" && constraints[i].initialValue != "") { serverUrl = constraints[i].initialValue; } else if (constraints[i].fieldName == "pi" && constraints[i].initialValue != "") { processInstanceId = constraints[i].initialValue; } else if (constraints[i].fieldName == "co" && constraints[i].initialValue != "") { codigoFormularioPublico = constraints[i].initialValue; } else if (constraints[i].fieldName == "uo" && constraints[i].initialValue != "") { cUserOauth = constraints[i].initialValue; } else if (constraints[i].fieldName == "userLocale" && constraints[i].initialValue != "") { userLocale = constraints[i].initialValue; } else if (constraints[i].fieldName == "isIdentityEnabled" && constraints[i].initialValue != "") { isIdentityEnabled = constraints[i].initialValue; } } /* gera codigo encriptado da solicitação */ var cString = DatasetFactory.createConstraint("stringValue", processInstanceId, processInstanceId, ConstraintType.MUST); var dsDecode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", null, [cString], null); if (dsDecode != undefined && dsDecode != null && dsDecode.rowsCount > 0) { processInstanceId = dsDecode.getValue(0, "decoded"); } var cCodForm = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var dsConfig = DatasetFactory.getDataset("dpf_configuracoes", null, [cCodForm], null); if (dsConfig != undefined && dsConfig != null && dsConfig.rowsCount > 0) { userSolicitante = dsConfig.getValue(0, "userStartProcessMatricula") + ""; datasetFormulario = dsConfig.getValue(0, "datasetFormulario") + ""; idFormularioConfiguracoes = dsConfig.getValue(0, "metadata#parent_id") + ""; var valor = dsConfig.getValue(0, "senhaStartProcess") + ""; var str = new java.lang.String(valor); var asBytes = java.util.Base64.getDecoder().decode(str); password = new java.lang.String(asBytes, "utf-8"); user = dsConfig.getValue(0, "userStartProcessLogin") + ""; } log.info("Digte Public Form - @@ idFormularioConfiguracoes: " + idFormularioConfiguracoes); tempImgFolder = getTempImgFolder(idFormularioConfiguracoes, company); /* acha a pasta do formulario de configuracoes */ if (tempImgFolder == -1) { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-TempUpload-' + userLocale]]); return dataset; } atividadeDestino = getState(user, password, company, processInstanceId, serverUrl, userSolicitante); threadSequence = getThreadSequence(user, password, company, processInstanceId, atividadeDestino, serverUrl); cardData = loadCardData(user, password, company, processInstanceId, serverUrl, userSolicitante); if (threadSequence == -1) { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-' + userLocale]]); return dataset; } /*PREPARANDO PARAMETROS PARA CHAMADA DO WEBSERVICE */ var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPCode = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cAtiv = DatasetFactory.createConstraint("atividadeDestino", atividadeDestino, "", ConstraintType.MUST), cUserS = DatasetFactory.createConstraint("userSolicitante", userSolicitante, "", ConstraintType.MUST), cThread = DatasetFactory.createConstraint("threadSequence", threadSequence, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), cLocale = DatasetFactory.createConstraint("userLocale", userLocale, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPCode, cAtiv, cUserS, cThread, cURL, cLocale); for (var i = 0; i < cardData.length; i++) { var cField = DatasetFactory.createConstraint("field", JSON.stringify(cardData[i]), "", ConstraintType.MUST); constr.push(cField); } for (var i = 0; i < attachments.length; i++) { var cAttach = DatasetFactory.createConstraint("attachment", JSON.stringify(attachments[i]), "", ConstraintType.MUST); constr.push(cAttach); } log.info("Digte Public Form - ======Chamada ds_dpf_saveAndSendTaskSoap"); var saveAndSendTaskSoap = DatasetFactory.getDataset("ds_dpf_saveAndSendTaskSoap", null, constr, null); if (saveAndSendTaskSoap != null && saveAndSendTaskSoap != undefined && saveAndSendTaskSoap.rowsCount > 0) { if (saveAndSendTaskSoap.getValue(0, "message") != undefined) { var message = saveAndSendTaskSoap.getValue(0, "message"); dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-' + userLocale] + " (" + message + ")" ]); return dataset; } else if (saveAndSendTaskSoap.getValue(0, "iTask") != undefined) { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-sucesso-' + userLocale]]); return dataset; } } else { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-' + userLocale]]); return dataset; } } log.info("Digte Public Form - @@@ Fim Dataset ds_dpf_addAnexo.js"); return dataset; } function loadCardData(user, password, company, processInstanceId, serverUrl, userSolicitante) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserId = DatasetFactory.createConstraint("userId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserId, cURL); var dsGetInstanceCardDataSoap = DatasetFactory.getDataset("ds_dpf_getInstanceCardDataSoap", null, constr, null); var cardData = []; if (dsGetInstanceCardDataSoap != null && dsGetInstanceCardDataSoap != undefined && dsGetInstanceCardDataSoap.rowsCount > 0) { if (dsGetInstanceCardDataSoap.getValue(0, "field") != undefined) { for (var i = 0; i < dsGetInstanceCardDataSoap.rowsCount; i++) { cardData.push({'field': dsGetInstanceCardDataSoap.getValue(i, "field") + '', 'value': dsGetInstanceCardDataSoap.getValue(i, "value") + ''}); } } } return cardData; } function getThreadSequence(user, password, company, processInstanceId, stateSequence, serverUrl) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cState = DatasetFactory.createConstraint("stateSequence", stateSequence, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cState, cURL); var dsGetActualThreadSoap = DatasetFactory.getDataset("ds_dpf_getActualThreadSoap", null, constr, null); if (dsGetActualThreadSoap != null && dsGetActualThreadSoap != undefined && dsGetActualThreadSoap.rowsCount > 0) { if (dsGetActualThreadSoap.getValue(0, "actualThread") != undefined) { return dsGetActualThreadSoap.getValue(0, "actualThread"); } else { return -1; } } } function getState(user, password, company, processInstanceId, serverUrl, userSolicitante) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserId = DatasetFactory.createConstraint("userId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserId, cURL); var dsGetAllActiveStatesSoap = DatasetFactory.getDataset("ds_dpf_getAllActiveStatesSoap", null, constr, null); if (dsGetAllActiveStatesSoap != null && dsGetAllActiveStatesSoap != undefined && dsGetAllActiveStatesSoap.rowsCount > 0) { if (dsGetAllActiveStatesSoap.getValue(0, "state") != undefined) { return dsGetAllActiveStatesSoap.getValue(0, "state"); } else { return -1; } } } function uploadToAreaUser(user, password, company, newDocumentId, newDocumentVersion, userSolicitante, serverUrl) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cDoc = DatasetFactory.createConstraint("documentId", newDocumentId, "", ConstraintType.MUST), cVersion = DatasetFactory.createConstraint("version", newDocumentVersion, "", ConstraintType.MUST), cColleague = DatasetFactory.createConstraint("colleagueId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cDoc, cVersion, cColleague, cURL); var dsCopy = DatasetFactory.getDataset("ds_dpf_copyDocumentToUploadAreaSoap", null, constr, null); if (dsCopy != null && dsCopy != undefined && dsCopy.rowsCount > 0) { if (dsCopy.getValue(0, "fileName") != undefined) { return dsCopy.getValue(0, "fileName"); } else { return -1; } } } function getTempImgFolder(idFormularioConfiguracoes, company) { var idPastaConfiguracoes = getParentDocumentId(idFormularioConfiguracoes, company); var cParentDocumentId = DatasetFactory.createConstraint("parentDocumentId", idPastaConfiguracoes, idPastaConfiguracoes, ConstraintType.MUST); var cCompany = DatasetFactory.createConstraint("documentPK.companyId", company, company, ConstraintType.MUST); var cActive = DatasetFactory.createConstraint("activeVersion", "true", "true", ConstraintType.MUST); var cDocumentType = DatasetFactory.createConstraint("documentType", "1", "1", ConstraintType.MUST); var dsDocument = DatasetFactory.getDataset("document", ["documentPK.documentId"], [cParentDocumentId, cCompany, cActive, cDocumentType], null); if (dsDocument != null && dsDocument != undefined && dsDocument.rowsCount > 0) { var tempUploadFolder = dsDocument.getValue(0, "documentPK.documentId") + ""; } else { var tempUploadFolder = -1; } return tempUploadFolder; } function getParentDocumentId(documentPkId, company) { var cDocumentId = DatasetFactory.createConstraint("documentPK.documentId", documentPkId, documentPkId, ConstraintType.MUST); var cCompany = DatasetFactory.createConstraint("documentPK.companyId", company, company, ConstraintType.MUST); var cActive = DatasetFactory.createConstraint("activeVersion", "true", "true", ConstraintType.MUST); var dsDocument = DatasetFactory.getDataset("document", ["parentDocumentId"], [cDocumentId, cCompany, cActive], null); if (dsDocument != null && dsDocument != undefined && dsDocument.rowsCount > 0) { var parentDocumentId = dsDocument.getValue(0, "parentDocumentId") + ""; } log.info("Digte Public Form - @@ documentPkId: " + documentPkId); log.info("Digte Public Form - @@ parentDocumentId: " + parentDocumentId); return parentDocumentId; } var objLocale = { 'saveAndSendTaskSoap-message-falha-pt_BR': 'Falha ao adicionar anexo', 'saveAndSendTaskSoap-message-falha-en_US': 'Failed to add attachment', 'saveAndSendTaskSoap-message-falha-es': 'Error al agregar datos adjuntos', 'saveAndSendTaskSoap-message-falha-TempUpload-pt_BR': 'Pasta Temporária Digte Temp Upload não foi encontrada', 'saveAndSendTaskSoap-message-falha-TempUpload-en_US': 'Temporary folder Digte Temp Upload was not found', 'saveAndSendTaskSoap-message-falha-TempUpload-es': 'No se encontró la carpeta temporal Digte Temp Upload', 'saveAndSendTaskSoap-message-sucesso-pt_BR': 'Sucesso ao adicionar anexo', 'saveAndSendTaskSoap-message-sucesso-en_US': 'Success while adding attachment', 'saveAndSendTaskSoap-message-sucesso-es': 'Éxito al agregar el anexo', }