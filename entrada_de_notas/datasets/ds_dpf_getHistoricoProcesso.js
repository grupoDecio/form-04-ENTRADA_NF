function createDataset(fields, constraints, sortFields) { log.info("Digte Public Form - @@@ Inicio Dataset ds_dpf_getHistoricoProcesso.js"); var dataset = DatasetBuilder.newDataset(); dataset.addColumn('movementHour'); dataset.addColumn('movementDate'); dataset.addColumn('stateSequence'); dataset.addColumn('active'); dataset.addColumn('etapa'); dataset.addColumn('jornada'); var processInstanceId = ""; if (constraints != null) { for (var i = 0; i < constraints.length; i++) { if (constraints[i].fieldName == "processInstanceId" && constraints[i].initialValue != "") { processInstanceId = constraints[i].initialValue; } } } /* gera codigo encriptado da solicitação */ var cString = DatasetFactory.createConstraint("stringValue", processInstanceId, processInstanceId, ConstraintType.MUST); var dsDecode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", null, [cString], null); if (dsDecode != undefined && dsDecode != null && dsDecode.rowsCount > 0) { processInstanceId = dsDecode.getValue(0, "decoded"); } var constr = []; if (processInstanceId != "") { var c1 = DatasetFactory.createConstraint("processHistoryPK.processInstanceId", processInstanceId, processInstanceId, ConstraintType.MUST); constr.push(c1); } var dsProcess = DatasetFactory.getDataset("processHistory", ["movementHour", "movementDate", "stateSequence", "active","processHistoryPK.movementSequence"], constr, ["processHistoryPK.movementSequence"]); var WorkflowAPIService = fluigAPI.getWorkflowService(); for (var i = 0; i < dsProcess.rowsCount; i++) { var iProcessInstanceId = parseInt(processInstanceId); var iStateSequence = parseInt(dsProcess.getValue(i, "stateSequence")); var iThreadSequence = 0; var iMovimentSequence = parseInt(dsProcess.getValue(i, "processHistoryPK.movementSequence")); var etapa = ""; var jornada = ""; try{ var complements = WorkflowAPIService.findObservations(iProcessInstanceId, iStateSequence, iThreadSequence); for(var aa = 0; aa < complements.size(); aa++){ if (complements.get(aa).getMovementSequence() == iMovimentSequence){ var observation = complements.get(aa).getObservation(); if (observation.indexOf("###") > -1){ var aObservation = observation.split("###"); etapa = aObservation[0]; if (etapa != null) { etapa = etapa.replace("Etapa:",""); etapa = etapa.replace(" ",""); } jornada = aObservation[2]; if (jornada != null){ jornada = jornada.replace("Jornada:",""); jornada = jornada.replace(" ",""); } } } } } catch(ex){ log.info("@@@@@@@@@@@@@ Public Form - Admissao Digital - ERRO ds_dpf_getHistoricoProcesso - busca etapa/jornada - " + ex.message); } dataset.addRow([dsProcess.getValue(i, "movementHour"), dsProcess.getValue(i, "movementDate"), dsProcess.getValue(i, "stateSequence"), dsProcess.getValue(i, "active"), etapa, jornada ]); } log.info("Digte Public Form - @@@ Fim Dataset ds_dpf_getHistoricoProcesso.js"); return dataset; }