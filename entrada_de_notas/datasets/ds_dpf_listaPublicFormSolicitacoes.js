function createDataset(fields, constraints, sortFields) { log.info("Digte Public Form - @@@ Inicio Dataset ds_dpf_listaPublicFormSolicitacoes.js"); var dataset = DatasetBuilder.newDataset(); var companyId = getValue("WKCompany"); var codigoFormularioPublico = ""; var codSolicitacao = ""; var fieldsAutenticacao = []; var userLocale = 'pt_BR'; var format = new java.text.SimpleDateFormat("yyyy-MM-dd hh:mm:ss"); if (constraints != null && constraints.length > 0) { for (var c = 0; c < constraints.length; c++) { if (constraints[c].fieldName == "co" && constraints[c].initialValue != "") { codigoFormularioPublico = constraints[c].initialValue; } else if (constraints[c].fieldName == "f") { fieldsAutenticacao.push(JSON.parse(constraints[c].initialValue)); /* Ex.: {"field":"campo1", "value": "Valor do campo"} */ } else if (constraints[c].fieldName == "codSolicitacao") { codSolicitacao = constraints[c].initialValue; } else if (constraints[c].fieldName == "userLocale" && constraints[c].initialValue != "") { userLocale = constraints[c].initialValue; } } if (codigoFormularioPublico != "") { var constrForm = []; var cCodForm = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); constrForm.push(cCodForm); var dsConfig = DatasetFactory.getDataset("dpf_configuracoes", ["datasetFormulario"], constrForm, null); var datasetFormulario = ""; if (dsConfig != undefined && dsConfig != null && dsConfig.rowsCount > 0) { datasetFormulario = dsConfig.getValue(0, "datasetFormulario") + ""; /*busca os campos*/ var documentId = dsConfig.getValue(0, "metadata#id"); var documentVersion = dsConfig.getValue(0, "metadata#version"); var c1 = DatasetFactory.createConstraint("tablename", "tbCamposIdentificacao", "tbCamposIdentificacao", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentId, documentId, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersion, documentVersion, ConstraintType.MUST); var c4 = DatasetFactory.createConstraint("metadata#active", "true", "true", ConstraintType.MUST); var c5 = DatasetFactory.createConstraint("campoVisivel", "nao", "nao", ConstraintType.MUST_NOT); var c6 = DatasetFactory.createConstraint("campoVisivel", "incluir", "incluir", ConstraintType.MUST_NOT); var constrCampos = [c1, c2, c3, c4, c5, c6]; var dsCcampos = DatasetFactory.getDataset("dpf_configuracoes", ["campo", "descricaoCampo", "campoIdentificacao", "campoVisivel"], constrCampos, null); } var constrSolicitacoes = []; var cValor = null; var cCampo = null; var cRegistro = []; var constrAnexosPorocesso = []; var c1 = null; var cDataMs = null; if (codSolicitacao == "") { for (var i = 0; i < fieldsAutenticacao.length; i++) { var c1 = DatasetFactory.createConstraint(fieldsAutenticacao[i].field, fieldsAutenticacao[i].value, fieldsAutenticacao[i].value, ConstraintType.MUST); constrSolicitacoes.push(c1); } var c1 = DatasetFactory.createConstraint("metadata#active", true, true, ConstraintType.MUST); constrSolicitacoes.push(c1); var dsSolicitacoes = DatasetFactory.getDataset(datasetFormulario, null, constrSolicitacoes, null); /* cria colunas no novo dataset */ for (var i = 0; i < dsSolicitacoes.getColumnsCount(); i++) { if (dsCcampos != null ) { for (var g = 0; g < dsCcampos.rowsCount; g++) { /* somente retornar os campos visualizaveis*/ if (dsSolicitacoes.getColumnName(i) == dsCcampos.getValue(g, "campo")) { dataset.addColumn("descricaoCampo" + dsCcampos.getValue(g, "campo")); /* sera criada um coluna para guardar no do campo*/ dataset.addColumn(dsSolicitacoes.getColumnName(i)); } } } } /* criando campos adicionais */ dataset.addColumn("numeroSolicitacaoDigte"); /* criando campos adicionais */ dataset.addColumn("dtSolDigtePfMS"); /* criando campos adicionais */ dataset.addColumn("codSolicitacaoDigte"); /* criando campos adicionais */ dataset.addColumn("statusDigte"); /* criando campos adicionais */ dataset.addColumn("statusDescDigte"); /* Data de Conclusão */ dataset.addColumn("dtConclusaoDigte"); for (var i = 0; i < dsSolicitacoes.rowsCount; i++) { constrAnexosPorocesso = []; cRegistro = []; c1 = DatasetFactory.createConstraint("processAttachmentPK.companyId", companyId,companyId, ConstraintType.MUST); constrAnexosPorocesso.push(c1); /* primeiro anexo é sempre o formulario */ c1 = DatasetFactory.createConstraint("processAttachmentPK.attachmentSequence", 1,1, ConstraintType.MUST); constrAnexosPorocesso.push(c1); c1 = DatasetFactory.createConstraint("documentId", dsSolicitacoes.getValue(i,"documentId"),dsSolicitacoes.getValue(i,"documentId"), ConstraintType.MUST); constrAnexosPorocesso.push(c1); c1 = DatasetFactory.createConstraint("version", dsSolicitacoes.getValue(i,"version"),dsSolicitacoes.getValue(i,"version"), ConstraintType.MUST); constrAnexosPorocesso.push(c1); var dsAnexosPorocesso = DatasetFactory.getDataset("processAttachment", null, constrAnexosPorocesso, null); /* carregando valores para o novo dataset */ for (var t = 0; t < dsSolicitacoes.getColumnsCount(); t++) { cCampo = dsSolicitacoes.getColumnName(t); cValor = dsSolicitacoes.getValue(i,cCampo); if (dsCcampos != null ) { for (var g = 0; g < dsCcampos.rowsCount; g++) { /* somente retornar os campos visualizaveis */ if (cCampo == dsCcampos.getValue(g, "campo")) { cRegistro.push(dsCcampos.getValue(g, "descricaoCampo")); cRegistro.push(cValor); } } } } /* incluindo novo campo com o nr processo */ cRegistro.push(dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId")); /* incluindo novo campo com o nr processo */ var attachedDate = dsAnexosPorocesso.getValue(0,"attachedDate"); var data = format.parse(attachedDate); var millis = data.getTime(); cRegistro.push(millis.toString()); /* gera codigo encriptado da solicitação */ var cString = DatasetFactory.createConstraint("stringValue", dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"), dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"), ConstraintType.MUST); var dsEncode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", ["decoded"], [cString], null); var codSolicitacao = ""; if (dsEncode != undefined && dsEncode != null && dsEncode.rowsCount > 0) { codSolicitacao = dsEncode.getValue(0, "encoded"); } cRegistro.push(codSolicitacao); /* status do processo */ var constrPorocesso = []; c1 = DatasetFactory.createConstraint("workflowProcessPK.processInstanceId", dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"),dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"), ConstraintType.MUST); constrPorocesso.push(c1); c1 = DatasetFactory.createConstraint("workflowProcessPK.companyId", companyId, companyId, ConstraintType.MUST); constrPorocesso.push(c1); var dsWorkflowProcess = DatasetFactory.getDataset("workflowProcess", null, constrPorocesso, null); /* carregando valores para o novo dataset */ for (var r = 0; r < dsWorkflowProcess.rowsCount; r++) { /* tratamento do status */ var cStatus = dsWorkflowProcess.getValue(r,'status'); cRegistro.push(cStatus); /* guarda o codigo do status*/ /* guarda a descricao do status*/ if (cStatus == 4) /* cancelada */ { cStatus = objLocale['cancelado-' + userLocale]; cRegistro.push(cStatus); }else if (cStatus == 2) /* encerrada */ { cStatus = objLocale['encerrado-' + userLocale]; cRegistro.push(cStatus); } else /* em andamento */ { cStatus = objLocale['aberto-' + userLocale]; cRegistro.push(cStatus); } /* tratamento da Data Encerramento*/ var cDtConclusao = dsWorkflowProcess.getValue(r,'endDateProcess'); if (cDtConclusao != null && cDtConclusao != "") { var data = format.parse(cDtConclusao); var millis = data.getTime(); cRegistro.push(millis.toString()); } else { cRegistro.push(""); } } dataset.addRow(cRegistro); } } else { var cString = DatasetFactory.createConstraint("stringValue", codSolicitacao, codSolicitacao, ConstraintType.MUST); var dsDecode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", ["decoded"], [cString], null); var numeroSolicitacaoFluig = ""; if (dsDecode != undefined && dsDecode != null && dsDecode.rowsCount > 0) { numeroSolicitacaoFluig = dsDecode.getValue(0, "decoded"); } /* Lendo anexo do processo */ var constrAnexosPorocesso = []; var c1 = DatasetFactory.createConstraint("processAttachmentPK.processInstanceId", numeroSolicitacaoFluig, numeroSolicitacaoFluig, ConstraintType.MUST); constrAnexosPorocesso.push(c1); /* primeiro anexo do processo é sempre o formulario */ var c1 = DatasetFactory.createConstraint("processAttachmentPK.attachmentSequence", 1, 1, ConstraintType.MUST); constrAnexosPorocesso.push(c1); var c1 = DatasetFactory.createConstraint("processAttachmentPK.companyId", companyId, companyId, ConstraintType.MUST); constrAnexosPorocesso.push(c1); var dsAnexosPorocesso = DatasetFactory.getDataset("processAttachment", null, constrAnexosPorocesso, null); /* Lendo documento do anexo do processo */ c1 = DatasetFactory.createConstraint("companyId", companyId, companyId, ConstraintType.MUST); constrSolicitacoes.push(c1); c1 = DatasetFactory.createConstraint("documentId", dsAnexosPorocesso.getValue(0,"documentId"), dsAnexosPorocesso.getValue(0,"documentId"), ConstraintType.MUST); constrSolicitacoes.push(c1); c1 = DatasetFactory.createConstraint("metadata#active", true, true, ConstraintType.MUST); constrSolicitacoes.push(c1); var dsSolicitacoes = DatasetFactory.getDataset(datasetFormulario, null, constrSolicitacoes, null); /* cria colunas no novo dataset */ for (var i = 0; i < dsSolicitacoes.getColumnsCount(); i++) { if (dsCcampos != null ) { for (var g = 0; g < dsCcampos.rowsCount; g++) { /* somente retornar os campos visualizaveis*/ if (dsSolicitacoes.getColumnName(i) == dsCcampos.getValue(g, "campo")) { dataset.addColumn("descricaoCampo" + dsCcampos.getValue(g, "campo")); dataset.addColumn(dsSolicitacoes.getColumnName(i)); } } } } /* criando campos adicionais */ dataset.addColumn("numeroSolicitacaoDigte"); /* criando campos adicionais */ dataset.addColumn("dtSolDigtePfMS"); /* criando campos adicionais */ dataset.addColumn("codSolicitacaoDigte"); /* criando campos adicionais */ dataset.addColumn("statusDigte"); /* criando campos adicionais */ dataset.addColumn("statusDescDigte"); /* Data de Conclusão */ dataset.addColumn("dtConclusaoDigte"); /* carregando valores para o novo dataset */ for (var t = 0; t < dsSolicitacoes.getColumnsCount(); t++) { cCampo = dsSolicitacoes.getColumnName(t); cValor = dsSolicitacoes.getValue(0,cCampo); if (dsCcampos != null ) { for (var g = 0; g < dsCcampos.rowsCount; g++) { /* somente retornar os campos visualizaveis*/ if (cCampo == dsCcampos.getValue(g, "campo")) { cRegistro.push(dsCcampos.getValue(g, "descricaoCampo")); cRegistro.push(cValor); } } } } /* incluindo novo campo com o nr processo */ cRegistro.push(dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId")); /* incluindo novo campo com o nr processo */ var attachedDate = dsAnexosPorocesso.getValue(0,"attachedDate"); var data = format.parse(attachedDate); var millis = data.getTime(); cRegistro.push(millis.toString()); /* gera codigo encriptado da solicitação */ var cString = DatasetFactory.createConstraint("stringValue", dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"), dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"), ConstraintType.MUST); var dsEncode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", ["decoded"], [cString], null); var codSolicitacao = ""; if (dsEncode != undefined && dsEncode != null && dsEncode.rowsCount > 0) { codSolicitacao = dsEncode.getValue(0, "encoded"); } cRegistro.push(codSolicitacao); /* status do processo */ var constrPorocesso = []; c1 = DatasetFactory.createConstraint("workflowProcessPK.processInstanceId", dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"),dsAnexosPorocesso.getValue(0,"processAttachmentPK.processInstanceId"), ConstraintType.MUST); constrPorocesso.push(c1); c1 = DatasetFactory.createConstraint("workflowProcessPK.companyId", companyId, companyId, ConstraintType.MUST); constrPorocesso.push(c1); var dsWorkflowProcess = DatasetFactory.getDataset("workflowProcess", null, constrPorocesso, null); /* carregando valores para o novo dataset */ for (var r = 0; r < dsWorkflowProcess.rowsCount; r++) { var cStatus = dsWorkflowProcess.getValue(r,"status"); cRegistro.push(cStatus); /* guarda o codigo do status */ /* guarda a descricao do status */ if (cStatus == 4) /* cancelada */ { cStatus = objLocale["cancelado-" + userLocale]; cRegistro.push(cStatus); }else if (cStatus == 2) /*encerrada*/ { cStatus = objLocale["encerrado-" + userLocale]; cRegistro.push(cStatus); } else /*em andamento*/ { cStatus = objLocale["aberto-" + userLocale]; cRegistro.push(cStatus); } /* tratamento da Data Encerramento*/ var cDtConclusao = dsWorkflowProcess.getValue(r,"endDateProcess"); if (cDtConclusao != null && cDtConclusao != "") { var data = format.parse(cDtConclusao); var millis = data.getTime(); cRegistro.push(millis.toString()); } else { cRegistro.push(""); } } dataset.addRow(cRegistro); } } } log.info("Digte Public Form - @@@ Fim com Sucesso Dataset ds_dpf_listaPublicFormSolicitacoes.js"); return dataset; } var objLocale = { 'cancelado-pt_BR': 'Cancelado', 'cancelado-en_US': 'Cancelado', 'cancelado-es': 'Canceled', 'aberto-pt_BR': 'Aberto', 'aberto-en_US': 'Opened', 'aberto-es': 'Abierto', 'encerrado-pt_BR': 'Encerrado', 'encerrado-en_US': 'Closed', 'encerrado-es': 'Cerrado', }