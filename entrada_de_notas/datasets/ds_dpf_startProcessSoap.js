function createDataset(fields, constraints, sortFields) { log.info("Digte Public Form - @@@ Inicio Dataset ds_dpf_startProcessSoap.js"); var dataset = DatasetBuilder.newDataset(); var user = ""; var password = ""; var company = ""; var processCode = ""; var atividadeDestino = ""; var userSolicitante = ""; var cardData = []; var attachments = []; var serverUrl = ""; var userLocale = "pt_BR"; var currentUser = getValue("WKUser"); var connection = null; var isr = null; var la = null; var completeTask = "true"; var colleagueIds = []; try { if (constraints != null) { for (var i = 0; i < constraints.length; i++) { if (constraints[i].fieldName == "user" && constraints[i].initialValue != "") { user = constraints[i].initialValue; } else if (constraints[i].fieldName == "password" && constraints[i].initialValue != "") { password = new String(constraints[i].initialValue); password = password.replace(/&/g,"&#038;"); /* retirar o & pois quebra o xml soap */ password = password.replace(/>/g,"&#062;"); /* trocar > por asc para nao quebrar xml */ password = password.replace(/</g,"&#060;"); /* trocar < por asc para nao quebrar xml */ } else if (constraints[i].fieldName == "company" && constraints[i].initialValue != "") { company = constraints[i].initialValue; } else if (constraints[i].fieldName == "field") { cardData.push(JSON.parse(constraints[i].initialValue)); /* Ex.: {"field":"campo1", "value": "Valor do campo"} */ } else if (constraints[i].fieldName == "attachment") { attachments.push(JSON.parse(constraints[i].initialValue)); /* Ex.: {"fileName":"file1.txt", "description": "Arquivo"} */ } else if (constraints[i].fieldName == "serverUrl" && constraints[i].initialValue != "") { serverUrl = constraints[i].initialValue; } else if (constraints[i].fieldName == "atividadeDestino" && constraints[i].initialValue != "") { atividadeDestino = constraints[i].initialValue; } else if (constraints[i].fieldName == "processCode" && constraints[i].initialValue != "") { processCode = constraints[i].initialValue; } else if (constraints[i].fieldName == "userSolicitante" && constraints[i].initialValue != "") { userSolicitante = constraints[i].initialValue; } else if (constraints[i].fieldName == "userLocale" && constraints[i].initialValue != "") { userLocale = constraints[i].initialValue; } else if (constraints[i].fieldName == "completeTask" && constraints[i].initialValue != "") { completeTask = constraints[i].initialValue; } else if (constraints[i].fieldName == "colleagueIds") { colleagueIds.push(constraints[i].initialValue); } } var message = ""; if (user == "") { message = objLocale["param-user-" + userLocale]; } else if (password == "") { message = objLocale["param-password-" + userLocale]; } else if (company == "") { message = objLocale["param-company-" + userLocale]; } else if (serverUrl == "") { message = objLocale["param-serverUrl-" + userLocale]; } else if (atividadeDestino == "") { message = objLocale["param-atividadeDestino-" + userLocale]; } else if (processCode == "") { message = objLocale["param-processCode-" + userLocale]; } else if (userSolicitante == "") { message = objLocale["param-userSolicitante-" + userLocale]; } if (message != "") { dataset.addColumn("message"); dataset.addRow([message]); return dataset; } log.info("Digte Public Form - chamada rest: " + serverUrl + "/webdesk/ECMWorkflowEngineService?wsdl"); var url = new java.net.URL(serverUrl + "/webdesk/ECMWorkflowEngineService?wsdl"); var connection = url.openConnection(); connection.setDoOutput(true); log.info("Digte Public Form - conexao realizada"); var cValor = ""; var postData = new java.lang.StringBuilder(); postData.append('<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://ws.workflow.ecm.technology.totvs.com/">'); postData.append("<soapenv:Header/>"); postData.append("<soapenv:Body>"); postData.append("<ws:startProcess>"); postData.append("<username>" + user + "</username>"); postData.append("<password>" + password + "</password>"); postData.append("<companyId>" + company + "</companyId>"); postData.append("<processId>" + processCode + "</processId>"); postData.append("<choosedState>" + atividadeDestino + "</choosedState>"); postData.append("<colleagueIds>"); for(var c = 0; c < colleagueIds.length; c++){ postData.append("<item>"+colleagueIds[c]+"</item>"); } postData.append("</colleagueIds>"); postData.append("<comments></comments>"); postData.append("<userId>" + currentUser + "</userId>"); postData.append("<completeTask>"+completeTask+"</completeTask>"); postData.append("<attachments>"); for (var a = 0; a < attachments.length; a++) { postData.append("<item>"); postData.append("<attachments>"); postData.append("<attach>false</attach>"); postData.append("<principal>true</principal>"); postData.append("<fileName>" + attachments[a].fileName + "</fileName>"); postData.append("<editing>false</editing>"); postData.append("<pathName>BPM</pathName>"); postData.append("</attachments>"); postData.append("<colleagueId>" + currentUser + "</colleagueId>"); cValor = new String(attachments[a].description); cValor = cValor.replace(/&/g,"&#038;"); /* trocar & por asc para nao quebrar xml */ cValor = cValor.replace(/>/g,"&#062;"); /* trocar > por asc para nao quebrar xml */ cValor = cValor.replace(/</g,"&#060;"); /* trocar < por asc para nao quebrar xml */ postData.append("<description>" + cValor + "</description>"); postData.append("<documentId>0</documentId>"); postData.append("<fileName>" + attachments[a].fileName + "</fileName>"); postData.append("<newAttach>true</newAttach>"); postData.append("</item>"); } postData.append("</attachments>"); postData.append("<cardData>"); for (var i = 0; i < cardData.length; i++) { var cField = cardData[i].field; if ( cField.indexOf("ANONYMIZATION_DATE") == -1 && cField.indexOf("ANONYMIZATION_USER_ID") == -1) { postData.append("<item>"); postData.append("<item>" + cField + "</item>"); cValor = new String(cardData[i].value); cValor = cValor.replace(/&/g,"&#038;"); /* trocar & por asc para nao quebrar xml */ cValor = cValor.replace(/>/g,"&#062;"); /* trocar > por asc para nao quebrar xml */ cValor = cValor.replace(/</g,"&#060;"); /* trocar < por asc para nao quebrar xml */ postData.append("<item>" + cValor + "</item>"); postData.append("</item>"); } } postData.append("</cardData>"); postData.append("<appointment>"); postData.append("</appointment>"); postData.append("<managerMode>false</managerMode>"); postData.append("</ws:startProcess>"); postData.append("</soapenv:Body>"); postData.append("</soapenv:Envelope>"); log.info("postData"); log.dir(postData); connection.setRequestMethod("POST"); var SOAPAction = "startProcess"; connection.setRequestProperty("Content-Type", "text/xml; charset=utf-8"); connection.setRequestProperty("SOAPAction", SOAPAction); var os = connection.getOutputStream(); os.write(postData.toString().getBytes()); os.flush(); var retorno = connection.getResponseCode(); var isr = new java.io.InputStreamReader(connection.getInputStream()); var la = new java.io.BufferedReader(isr); var mensagem = new java.lang.String(postData); var posIni = mensagem.indexOf("<password>") + 10; var posFim = mensagem.indexOf("</password>"); var senha = mensagem.substring(posIni,posFim); mensagem = mensagem.replace("<password>" + senha + "</password>", "<password>************</password>" ); log.info('Digte Public Form - xml: >>>>>>> '+mensagem); var responseString = ""; var outputString = ""; /* Write the SOAP message response to a String. */ while ((responseString = la.readLine()) != null) { outputString = outputString + responseString; } var dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance(); var db = dbf.newDocumentBuilder(); var stringReader = new java.io.StringReader(outputString); var xml = db.parse( new org.xml.sax.InputSource(stringReader)); var result = xml.getElementsByTagName("result"); log.info("$$$$$$$ retorno starProcesso $$$$$$$$"); log.dir(result); var items = result.item(0).getChildNodes(); var itemsLength = items.getLength(); stringReader.close(); if (itemsLength > 1) { if (outputString.indexOf("ERRO") == -1) { var iProcess = ""; var WDNrDocto = ""; var iTask = ""; var cDestino = ""; var WDNrVersao = ""; var currentMovto = ""; for (var i = 0; i < itemsLength; i++) { var item = items.item(i).getChildNodes(); if (item.item(0).getTextContent().trim() == "WDNrDocto") { WDNrDocto = item.item(1).getTextContent().trim() } if (item.item(0).getTextContent().trim() == "iTask") { iTask = item.item(1).getTextContent().trim() } if (item.item(0).getTextContent().trim() == "cDestino") { cDestino = item.item(1).getTextContent().trim() } if (item.item(0).getTextContent().trim() == "WDNrVersao") { WDNrVersao = item.item(1).getTextContent().trim() } if (item.item(0).getTextContent().trim() == "iProcess") { iProcess = item.item(1).getTextContent().trim() } if (item.item(0).getTextContent().trim() == "currentMovto") { currentMovto = item.item(1).getTextContent().trim() } } log.info('Digte Public Form - ==========retorno:' +outputString); var dataset = DatasetBuilder.newDataset(); dataset.addColumn("iProcess"); dataset.addColumn("WDNrDocto"); dataset.addColumn("iTask"); dataset.addColumn("cDestino"); dataset.addColumn("WDNrVersao"); dataset.addColumn("currentMovto"); dataset.addRow(new Array(iProcess, WDNrDocto, iTask, cDestino, WDNrVersao, currentMovto)); } else { log.info("Digte Public Form - @@ message: " + item.item(1).getTextContent().trim()); dataset.addColumn("message"); dataset.addRow([item.item(1).getTextContent().trim()]); return dataset; } } else { var item = items.item(0).getChildNodes(); log.info("Digte Public Form - @@ message: " + item.item(1).getTextContent().trim()); dataset.addColumn("message"); dataset.addRow([item.item(1).getTextContent().trim()]); return dataset; } } else { dataset.addColumn("message"); dataset.addRow([objLocale['parametros-' + userLocale]]); return dataset; } } catch (e) { log.info("Digte Public Form - @@ Catch exceção ao executar startProcess " + e.message +"("+e.lineNumber+")"); dataset.addColumn("message"); dataset.addRow([objLocale['startProcess-catch-' + userLocale] + ' ' + e]); return dataset; } finally { if(isr != null) isr.close(); if(la != null) la.close(); if(connection != null) connection.disconnect(); } log.info("Digte Public Form - @@@ Fim Dataset ds_dpf_startProcessSoap.js"); return dataset; } var objLocale = { "parametros-pt_BR": "@@ Não foram informados os parâmetros.", "parametros-en_US": "@@ The parameters were not entered.", "parametros-es": "@@ No se han informado de los parámetros.", "startProcess-catch-pt_BR": "@@ Catch exceção ao executar startProcess", "startProcess-catch-en_US": "@@ Catch Exception when executing startProcess", "startProcess-catch-es": "@@ Catch excepción al ejecutar startProcess", "param-user-pt_BR": "@@ Parametro |user| não informado.", "param-user-en_US": "@@ Parameter |user| uninformed.", "param-user-es": "@@ Parámetro |user| no informado.", "param-password-pt_BR": "@@ Parametro |password| não informado.", "param-password-en_US": "@@ Parameter |password| uninformed.", "param-password-es": "@@ Parámetro |password| no informado.", "param-company-pt_BR": "@@ Parametro |company| não informado.", "param-company-en_US": "@@ Parameter |company| uninformed.", "param-company-es": "@@ Parámetro |company| no informado.", "param-serverUrl-pt_BR": "@@ Parametro |serverUrl| não informado.", "param-serverUrl-en_US": "@@ Parameter |serverUrl| uninformed.", "param-serverUrl-es": "@@ Parámetro |serverUrl| no informado.", "param-atividadeDestino-pt_BR": "@@ Parametro |atividadeDestino| não informado.", "param-atividadeDestino-en_US": "@@ Parameter |atividadeDestino| uninformed.", "param-atividadeDestino-es": "@@ Parámetro |atividadeDestino| no informado.", "param-processCode-pt_BR": "@@ Parametro |processCode| não informado.", "param-processCode-en_US": "@@ Parameter |processCode| uninformed.", "param-processCode-es": "@@ Parámetro |processCode| no informado.", "param-userSolicitante-pt_BR": "@@ Parametro |userSolicitante| não informado.", "param-userSolicitante-en_US": "@@ Parameter |userSolicitante| uninformed.", "param-userSolicitante-es": "@@ Parámetro |userSolicitante| no informado.", }