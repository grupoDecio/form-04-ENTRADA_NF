function createDataset(fields, constraints, sortFields) { log.info("Digte Public Form - @@@ Inicio Dataset ds_dpf_movimentarSolicitacao.js"); var dataset = DatasetBuilder.newDataset(); var user = ""; var password = ""; var company = getValue("WKCompany"); var processInstanceId = ""; var atividadeDestino = ""; var userSolicitante = ""; var cardData = []; var cardDataNovo = []; var attachments = []; var anexoAtualizado = []; var serverUrl = ""; var threadSequence = ""; var codigoFormularioPublico = ""; var datasetFormulario = ""; var idFormularioConfiguracoes = ""; var tempImgFolder = ""; var userLocale = 'pt_BR'; var isIdentityEnabled = ""; var completeTask = "true"; var cStatus = ""; var cStatusDescricao = ""; var enviarParaTelaConsulta = ""; var paginaCustomizadaURL = ""; var telaConsultaURL = ""; var mensagemConclusao = ""; var processInstanceIdCode = ""; var camposStatus = []; var jornada = ""; var jornadaDescricao = ""; var newDueDate = null; var lAchouAnexoStatusErro = false; var cAchouAnexoStatusErroMensagem = ""; var cStatusDestino = ""; var cUrlInsertTarget = ""; var operacao = ""; var anexoOpcao = ""; var cStatusBase64 = ""; if (constraints != null) { for (var i = 0; i < constraints.length; i++) { if (constraints[i].fieldName == "f") { cardDataNovo.push(JSON.parse(constraints[i].initialValue)); /* Ex.: {'field':'campo1', 'value': 'Valor do campo'} */ } else if (constraints[i].fieldName == "a") { attachments.push(JSON.parse(constraints[i].initialValue)); /*Ex.: {'fileName':'file1.txt', 'description': 'Arquivo'} */ } else if (constraints[i].fieldName == "su" && constraints[i].initialValue != "") { serverUrl = constraints[i].initialValue; } else if (constraints[i].fieldName == "pi" && constraints[i].initialValue != "") { processInstanceIdCode = constraints[i].initialValue; } else if (constraints[i].fieldName == "co" && constraints[i].initialValue != "") { codigoFormularioPublico = constraints[i].initialValue; } else if (constraints[i].fieldName == "uo" && constraints[i].initialValue != "") { cUserOauth = constraints[i].initialValue; } else if (constraints[i].fieldName == "userLocale" && constraints[i].initialValue != "") { userLocale = constraints[i].initialValue; } else if (constraints[i].fieldName == "isIdentityEnabled" && constraints[i].initialValue != "") { isIdentityEnabled = constraints[i].initialValue; } else if (constraints[i].fieldName == "st" && constraints[i].initialValue != "") { cStatusBase64 = constraints[i].initialValue; } else if (constraints[i].fieldName == "cj" && constraints[i].initialValue != "") { jornada = constraints[i].initialValue; } else if (constraints[i].fieldName == "op" && constraints[i].initialValue != "") { operacao = constraints[i].initialValue; } else if (constraints[i].fieldName == "complete" && constraints[i].initialValue != "") { completeTask = constraints[i].initialValue == "true" ? false : true; } else if (constraints[i].fieldName == "anexoOpcao" && constraints[i].initialValue != "") { anexoOpcao = constraints[i].initialValue; } } /* gera codigo desencriptado da solicitação */ var cString = DatasetFactory.createConstraint("stringValue", processInstanceIdCode, processInstanceIdCode, ConstraintType.MUST); var dsDecode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", null, [cString], null); if (dsDecode != undefined && dsDecode != null && dsDecode.rowsCount > 0) { processInstanceId = dsDecode.getValue(0, "decoded"); } /* gera codigo desencriptado da status base64 */ var aux = new java.lang.String(cStatusBase64); try{ var asBytes = java.util.Base64.getDecoder().decode(aux); cStatus = new java.lang.String(asBytes, "utf-8"); } catch (e){ cStatus = aux; } /*pega os dados do formulario public */ var cCodForm = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var dsConfig = DatasetFactory.getDataset("dpf_configuracoes", null, [cCodForm], null); if (dsConfig != undefined && dsConfig != null && dsConfig.rowsCount > 0) { userSolicitante = dsConfig.getValue(0, "userStartProcessMatricula") + ""; datasetFormulario = dsConfig.getValue(0, "datasetFormulario") + ""; idFormularioConfiguracoes = dsConfig.getValue(0, "metadata#parent_id") + ""; var valor = dsConfig.getValue(0, "senhaStartProcess") + ""; var str = new java.lang.String(valor); var asBytes = java.util.Base64.getDecoder().decode(str); password = new java.lang.String(asBytes, "utf-8"); user = dsConfig.getValue(0, "userStartProcessLogin") + ""; enviarParaTelaConsulta = dsConfig.getValue(0, "enviarParaTelaConsulta") + ""; paginaCustomizadaURL = dsConfig.getValue(0, "paginaCustomizadaURL") + ""; telaConsultaURL = dsConfig.getValue(0, "telaConsultaURL") + ""; mensagemConclusao = dsConfig.getValue(0, "mensagemConclusao") + ""; /* campos para atualizacao */ var documentId = dsConfig.getValue(0, "metadata#id"); var documentVersion = dsConfig.getValue(0, "metadata#version"); var c1 = DatasetFactory.createConstraint("tablename", "tbCamposIdentificacao", "tbCamposIdentificacao", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentId, documentId, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersion, documentVersion, ConstraintType.MUST); var c4 = DatasetFactory.createConstraint("metadata#active", "true", "true", ConstraintType.MUST); var constrCampos = [c1, c2, c3, c4]; var dsCampos = DatasetFactory.getDataset("dpf_configuracoes", null, constrCampos, null); } log.info("Digte Public Form - @@ idFormularioConfiguracoes: " + idFormularioConfiguracoes); tempImgFolder = getTempImgFolder(idFormularioConfiguracoes, company); /* acha a pasta do formulario de configuracoes */ if (tempImgFolder == -1) { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-TempUpload-' + userLocale]]); return dataset; } cardData = loadCardData(user, password, company, processInstanceId, serverUrl, userSolicitante); /* sem atividade de destina será mantindo onde esta e tarefa nao será competada */ if (cStatus == "" || cStatus == null) { atividadeDestino = getState(user, password, company, processInstanceId, serverUrl, userSolicitante); completeTask = "false"; cardDataNovo = []; } else { /* Inicio - consisitr anexos */ var consCodigoFormularioPublico = DatasetFactory.createConstraint("co", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var consStatus = DatasetFactory.createConstraint("st", cStatusBase64, cStatusBase64, ConstraintType.MUST); var consPi = DatasetFactory.createConstraint("pi", processInstanceIdCode, processInstanceIdCode, ConstraintType.MUST); var constr = [consCodigoFormularioPublico,consStatus,consPi]; var dsAnexoStatus = DatasetFactory.getDataset("ds_dpf_getListaAnexo", null, constr, null); for (var i = 0; i < attachments.length; i++) { attachments[i]["deleted"] = false; attachments[i]["documentId"] = 0; attachments[i]["version"] = 0; attachments[i].fileName = attachments[i].fileName.replace("---CODDOC-","___CODDOC_"); attachments[i].fileName = attachments[i].fileName.replace("---","___"); /* tratamento temporario para ajustar o nome o arquivo vindo da assinatura digital iv2 */ if (attachments[i].fileName.indexOf("-cont___.pdf") > -1){ var now = new Date(); var dataHoraId = now.getFullYear() + "_" + now.getDay() + "_" + now.getMonth() + "_" + now.getHours() + "_" + now.getMinutes() + "_" + now.getSeconds() + "_" + now.getMilliseconds(); var ajusteNome = "-cont___" + dataHoraId + "_" + processInstanceIdCode + ".pdf"; attachments[i].fileName = attachments[i].fileName.replace("-cont___.pdf",ajusteNome); log.info("Digte Public Form - @@@ NOVO NOME ANEXO " + attachments[i].fileName); } /* tratamento temporario para ajustar o nome o arquivo vindo da assinatura digital iv2 */ } /* se for mover para anterior nao alterar anexos */ if (operacao == "anterior"){ attachments = []; } /* caso seja retorno nao consistir anexos */ if (dsAnexoStatus != null && dsAnexoStatus != undefined && dsAnexoStatus.rowsCount > 0 && operacao == "proximo") { for (var j = 0; j < dsAnexoStatus.rowsCount; j++) { if ( dsAnexoStatus.getValue(j, "uploadStatus") == false && dsAnexoStatus.getValue(j, "obrigatorio") == "sim" && ( anexoOpcao == "" || (anexoOpcao != "" && anexoOpcao == dsAnexoStatus.getValue(j, "anexoNome"))) ) { var lAchouAnexoStatus = false; /* verificas se tipo de documento foi encontrato pelo nome */ for (var i = 0; i < attachments.length; i++) { if (attachments[i].fileName.indexOf("___CODDOC_" + dsAnexoStatus.getValue(j, "tipoDocumentoCodigo") + "___") > -1){ attachments[i]["deleted"] = false; attachments[i]["documentId"] = 0; attachments[i]["version"] = 0; lAchouAnexoStatus = true; } } if (lAchouAnexoStatus == false){ dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-Falta-Anexo-' + userLocale] + dsAnexoStatus.getValue(j,"anexoDescricao")]); return dataset; } } /* verificar se o anexo foi atualizado e indicar que deve ser deletado */ if (dsAnexoStatus.getValue(j, "uploadStatus") == true) { var lAchou = false; for (var i = 0; i < attachments.length; i++) { if (attachments[i].fileName.indexOf("___CODDOC_" + dsAnexoStatus.getValue(j, "tipoDocumentoCodigo") + "___") > -1){ /* enviar novo documento */ attachments[i]["deleted"] = false; attachments[i]["documentId"] = 0; attachments[i]["version"] = 0; lAchou = true; break; } } /* eliminar documento anterior */ if (lAchou == true){ attachments.push({"fileName" : dsAnexoStatus.getValue(j, "filenameAnexo") , "description": dsAnexoStatus.getValue(j, "filenameAnexo"), "deleted" : true, "documentId" : parseInt(dsAnexoStatus.getValue(j, "documentIdAnexo")), "version" : parseInt(dsAnexoStatus.getValue(j, "versionAnexo"))}) } } } } /* Fim - consistir anexos */ var atividadeCorrente = getState(user, password, company, processInstanceId, serverUrl, userSolicitante); atividadeDestino = ""; var consCodigoFormularioPublico = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var dsStatus = DatasetFactory.getDataset("dpf_cadastro_status", null, [consCodigoFormularioPublico], null); if (dsStatus != null && dsStatus != undefined && dsStatus.rowsCount > 0) { var documentIdStatus = null; var documentVersionStatus = null; for (var iStatus = 0; iStatus < dsStatus.rowsCount; iStatus++) { if (dsStatus.getValue(iStatus, "atividadeOrdem") == cStatus){ cStatusDescricao = dsStatus.getValue(iStatus, "descricao"); documentIdStatus = dsStatus.getValue(iStatus, "metadata#id"); documentVersionStatus = dsStatus.getValue(iStatus, "metadata#version"); break; } } if (jornada != null && jornada != "") { var cCodForm = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var cCodJornada = DatasetFactory.createConstraint("codJornada", jornada, jornada, ConstraintType.MUST); var dsJornada = DatasetFactory.getDataset("dpf_cadastro_jornada", null, [cCodForm,cCodJornada], null); if (dsJornada != undefined && dsJornada != null && dsJornada.rowsCount > 0) { jornadaDescricao = dsJornada.getValue(0, "descricao"); var documentIdJornada = dsJornada.getValue(0, "metadata#id"); var documentVersionJornada = dsJornada.getValue(0, "metadata#version"); var c1 = DatasetFactory.createConstraint("tablename", "tbJornadaStatus", "tbJornadaStatus", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdJornada, documentIdJornada, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionJornada, documentVersionJornada, ConstraintType.MUST); var c4 = DatasetFactory.createConstraint("metadata#active", "true", "true", ConstraintType.MUST); var constrStatus = [c1, c2, c3, c4]; var dsStatusJornada = DatasetFactory.getDataset("dpf_cadastro_jornada", null, constrStatus, ["jornadaOrdem"]); /*buscar em ordem de seq da etapa da jornada */ var dsStatusJornadaNext = dsStatusJornada; for (var i = 0; i < dsStatusJornada.rowsCount; i++) { if (dsStatusJornada.getValue(i,"atividadeOrdem") == cStatus){ /*busca etapa que estou */ if ((operacao == "proximo" && (dsStatusJornada.rowsCount - 1) > i ) || (operacao == "anterior" && i > 0)) /* verifica se tem proxima etapa da jornada ou se é primeira etapa */ { /*trata de qual será a proxima etapa */ var iNextStatus = i; pontoWhile: while( (dsStatusJornada.rowsCount >= (iNextStatus + 1) && operacao == "proximo") || ( 0 <= (iNextStatus - 1) && operacao == "anterior") ) { if (operacao == "proximo") { iNextStatus = iNextStatus + 1; } else{ iNextStatus = iNextStatus - 1; } /* valida os campos do formulário para saber se deve entrar nesta etapa */ if ( dsStatusJornada.getValue(iNextStatus,"campo1") != null && dsStatusJornada.getValue(iNextStatus,"campo1") != "" || dsStatusJornada.getValue(iNextStatus,"campo2") != null && dsStatusJornada.getValue(iNextStatus,"campo2") != "" || dsStatusJornada.getValue(iNextStatus,"campo3") != null && dsStatusJornada.getValue(iNextStatus,"campo3") != "") { var campoJornadaCondicao1 = new java.lang.String(); campoJornadaCondicao1 = dsStatusJornada.getValue(iNextStatus,"campo1") == null ? "" : dsStatusJornada.getValue(iNextStatus,"campo1"); campoJornadaCondicao1 = campoJornadaCondicao1.toUpperCase(); var campoJornadaCondicao2 = new java.lang.String(); campoJornadaCondicao2 = dsStatusJornada.getValue(iNextStatus,"campo2") == null ? "" : dsStatusJornada.getValue(iNextStatus,"campo2"); campoJornadaCondicao2 = campoJornadaCondicao2.toUpperCase(); var campoJornadaCondicao3 = new java.lang.String(); campoJornadaCondicao3 = dsStatusJornada.getValue(iNextStatus,"campo3") == null ? "" : dsStatusJornada.getValue(iNextStatus,"campo3"); campoJornadaCondicao3 = campoJornadaCondicao3.toUpperCase(); var cardDataCondicao = []; /* atualizar com valores novos vindo da interface */ for (var ccc = 0; ccc < cardData.length; ccc++) { var condicaoCampo = cardData[ccc]; for (var dd = 0; dd < cardDataNovo.length; dd++) { if ( cardData[ccc].field == cardDataNovo[dd].field && cardDataNovo[dd].field != "" && cardDataNovo[dd].field != null && cardDataNovo[dd].field != "null") { condicaoCampo = cardDataNovo[dd]; break; } } cardDataCondicao.push(condicaoCampo); } /* atualizar com valores novos vindo da interface */ /* tratamento dos campos adicionais da adimissão digital */ var camposAdicionais = []; for (var cc = 0; cc < cardDataCondicao.length; cc++) { if (cardDataCondicao[cc].field.indexOf("nomeCampoAdicional___") > -1){ var indexCondicao = cardDataCondicao[cc].field; indexCondicao = indexCondicao.replace("nomeCampoAdicional___",""); indexCondicao = indexCondicao.replace("valorCampoAdicional___",""); indexCondicao = parseInt(indexCondicao); if (camposAdicionais[indexCondicao] != null){ var campo = { "value" : camposAdicionais[indexCondicao].value, "field" : cardDataCondicao[cc].value}; camposAdicionais[indexCondicao] = campo; } else { var campo = { "value" : "", "field" : cardDataCondicao[cc].value}; camposAdicionais[indexCondicao] = campo; } } if (cardDataCondicao[cc].field.indexOf("valorCampoAdicional___") > -1){ var indexCondicao = cardDataCondicao[cc].field; indexCondicao = indexCondicao.replace("nomeCampoAdicional___",""); indexCondicao = indexCondicao.replace("valorCampoAdicional___",""); indexCondicao = parseInt(indexCondicao); if (camposAdicionais[indexCondicao] != null){ var campo = { "value" : cardDataCondicao[cc].value, "field" : camposAdicionais[indexCondicao].field}; camposAdicionais[indexCondicao] = campo; } else { var campo = { "value" : cardDataCondicao[cc].value, "field" : ""}; camposAdicionais[indexCondicao] = campo; } } } for (var cc = 0; cc < camposAdicionais.length; cc++) { if (camposAdicionais[cc] != null){ var campo = {}; campo["field"] = camposAdicionais[cc]["field"]; campo["value"] = camposAdicionais[cc]["value"]; cardDataCondicao.push(campo); } } /* tratamento dos campos adicionais da adimissão digital */ var lOkCondicao = true; var campoCardData = new java.lang.String(); for (var c = 0; c < cardDataCondicao.length; c++) { campoCardData = cardDataCondicao[c].field == null ? "" : cardDataCondicao[c].field; campoCardData = campoCardData.toUpperCase(); if (campoCardData == campoJornadaCondicao1){ lOkCondicao = valorCondicaoEtapa(campoCardData,cardDataCondicao[c].value,campoJornadaCondicao1,dsStatusJornada.getValue(iNextStatus,"operacao1"),dsStatusJornada.getValue(iNextStatus,"valor1")); if (lOkCondicao == false) break; } if (campoCardData == campoJornadaCondicao2){ lOkCondicao = valorCondicaoEtapa(campoCardData,cardDataCondicao[c].value,campoJornadaCondicao2,dsStatusJornada.getValue(iNextStatus,"operacao2"),dsStatusJornada.getValue(iNextStatus,"valor2")); if (lOkCondicao == false) break; } if (campoCardData == campoJornadaCondicao3){ lOkCondicao = valorCondicaoEtapa(campoCardData,cardDataCondicao[c].value,campoJornadaCondicao3,dsStatusJornada.getValue(iNextStatus,"operacao3"),dsStatusJornada.getValue(iNextStatus,"valor3")); if (lOkCondicao == false) break; } } log.info("Digte Public Form - @@ - DADOS NOVOS - Usa esta ETAPA -- > " + lOkCondicao); if (lOkCondicao == false) continue pontoWhile; } /* valida os campos do formulário para saber se deve entrar nesta etapa */ var documentIdNextStatus = null; var documentVersionNextStatus = null; cStatusDestino = dsStatusJornada.getValue(iNextStatus,"atividadeOrdem"); /* busca proxima-antarior etapa */ var cDestinoEtapa = dsStatusJornada.getValue(iNextStatus,"destinoEtapa"); /* indica se usa idAtividae ou idAtividade Destino na proximo-anterior etapa*/ for (var iStatus = 0; iStatus < dsStatus.rowsCount; iStatus++) { /* pega id do documento da proxma-anterior etapa*/ if (dsStatus.getValue(iStatus, "atividadeOrdem") == cStatusDestino){ documentIdNextStatus = dsStatus.getValue(iStatus, "metadata#id"); documentVersionNextStatus = dsStatus.getValue(iStatus, "metadata#version"); cUrlInsertTarget = dsStatus.getValue(iStatus, "linkAcao"); break; } } var c1 = DatasetFactory.createConstraint("tablename", "tbAtividade" ,"tbAtividade", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdNextStatus, documentIdNextStatus, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionNextStatus, documentVersionNextStatus, ConstraintType.MUST); var constraintsFilhos = new Array(c1, c2, c3); var dsAtidadesStatus= DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, ["atividadeId"]); if (dsAtidadesStatus != null && dsAtidadesStatus != undefined && dsAtidadesStatus.rowsCount > 0){ for (var j = 0; j < dsAtidadesStatus.rowsCount; j++) { if ( ( dsAtidadesStatus.getValue(j, "atividadeIdDestino") != null && dsAtidadesStatus.getValue(j, "atividadeIdDestino") != "" && cDestinoEtapa == "sim") || ( dsAtidadesStatus.getValue(j, "atividadeId") != null && dsAtidadesStatus.getValue(j, "atividadeId") != "" && cDestinoEtapa != "sim") ) { if (cDestinoEtapa == "sim"){ atividadeDestino = dsAtidadesStatus.getValue(j, "atividadeIdDestino"); } else { atividadeDestino = dsAtidadesStatus.getValue(j, "atividadeId"); } break; } } } /*Tratando do prazo da proxima etapa*/ if (dsStatusJornada.getValue(iNextStatus,"atividadeDestinoPrazo") != null && parseInt(dsStatusJornada.getValue(iNextStatus,"atividadeDestinoPrazo")) > 0){ var time = new Date(); newDueDate = new Date(); newDueDate.setHours(time.getHours() + parseInt(dsStatusJornada.getValue(iNextStatus,"atividadeDestinoPrazo"))); } break; } break; } } } } } else{ var c1 = DatasetFactory.createConstraint("tablename", "tbAtividade" ,"tbAtividade", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdStatus, documentIdStatus, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionStatus, documentVersionStatus, ConstraintType.MUST); var c4 = DatasetFactory.createConstraint("atividadeId", atividadeCorrente, atividadeCorrente, ConstraintType.MUST); var c5 = DatasetFactory.createConstraint("tipoEtapa", "privado", "privado", ConstraintType.MUST_NOT); var constraintsFilhos = new Array(c1, c2, c3, c4, c5); /*Busca o dataset*/ var dsAtidadesStatus = DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, null); if (dsAtidadesStatus != null && dsAtidadesStatus != undefined && dsAtidadesStatus.rowsCount > 0){ for (var j = 0; j < dsAtidadesStatus.rowsCount; j++) { /*Adiciona os valores nas colunas respectivamente.*/ atividadeDestino = dsAtidadesStatus.getValue(j, "atividadeIdDestino"); if (dsAtidadesStatus.getValue(j,"atividadeDestinoPrazo") != null && parseInt(dsAtidadesStatus.getValue(j,"atividadeDestinoPrazo")) > 0){ var time = new Date(); newDueDate = new Date(); newDueDate.setHours(time.getHours() + parseInt(dsAtidadesStatus.getValue(j,"atividadeDestinoPrazo"))); } break; } } } /* caso nao tenha atividade destino na movimentacao eleminar as atualizacoes vindas da interface*/ if (atividadeDestino == "" || atividadeDestino == null) { atividadeDestino = getState(user, password, company, processInstanceId, serverUrl, userSolicitante); completeTask = "false"; cardDataNovo = []; } else{ var c1 = DatasetFactory.createConstraint("tablename", "tbCamposStatus" ,"tbCamposStatus", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdStatus, documentIdStatus, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionStatus, documentVersionStatus, ConstraintType.MUST); var constraintsFilhos = new Array(c1, c2, c3); /*Busca o dataset&*/ var dsCamposStatus = DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, null); if (dsCamposStatus != null && dsCamposStatus != undefined && dsCamposStatus.rowsCount > 0){ for (var j = 0; j < dsCamposStatus.rowsCount; j++) { camposStatus.push({"campo": dsCamposStatus.getValue(j, "campoStatus") , "campoTabela" : dsCamposStatus.getValue(j, "campoTabelaStatus"), "campoVisivel" : dsCamposStatus.getValue(j, "campoVisivel") }); } } } } else{ atividadeDestino = getState(user, password, company, processInstanceId, serverUrl, userSolicitante); completeTask = "false"; cardDataNovo = []; } } threadSequence = getThreadSequence(user, password, company, processInstanceId, atividadeDestino, serverUrl); if (threadSequence == -1) { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-Concluida-' + userLocale]]); return dataset; } /*PREPARANDO PARAMETROS PARA CHAMADA DO WEBSERVICE */ var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPCode = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cAtiv = DatasetFactory.createConstraint("atividadeDestino", atividadeDestino, "", ConstraintType.MUST), cUserS = DatasetFactory.createConstraint("userSolicitante", userSolicitante, "", ConstraintType.MUST), cThread = DatasetFactory.createConstraint("threadSequence", threadSequence, "", ConstraintType.MUST), cCompleteTask = DatasetFactory.createConstraint("completeTask", completeTask, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), cLocale = DatasetFactory.createConstraint("userLocale", userLocale, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPCode, cAtiv, cUserS, cThread, cURL, cLocale,cCompleteTask); /* alterar valor com os campos da interface de movimentacao e somente enviar campos alterados */ for (var d = 0; d < cardData.length; d++) { var campoCardData = new java.lang.String(); campoCardData = cardData[d].field == null ? "" : cardData[d].field; campoCardData = campoCardData.toUpperCase(); if (dsCampos != undefined && dsCampos != null && dsCampos.rowsCount > 0) { for (var c = 0; c < dsCampos.rowsCount; c++) { var campoConfiguracao = new java.lang.String(); campoConfiguracao = dsCampos.getValue(c, "campo") == null ? "" : dsCampos.getValue(c, "campo"); campoConfiguracao = campoConfiguracao.toUpperCase(); var campoTabelaConfiguracao = new java.lang.String(); campoTabelaConfiguracao = dsCampos.getValue(c, "campoTabela") == null ? "" : dsCampos.getValue(c, "campoTabela"); campoTabelaConfiguracao = campoTabelaConfiguracao.toUpperCase(); if ( ((campoCardData == campoConfiguracao && campoCardData != "" && campoCardData != null) || (campoTabelaConfiguracao != "" && campoCardData.indexOf(campoTabelaConfiguracao) > -1) )) { var lAtualizar = false; /* caso tenha um status sendo passado serão utilizados os parametros de campos do stado */ if (cStatus != "" && cStatus != null) { for (var a = 0; a < camposStatus.length; a++) { var jObj = camposStatus[a]; var campoStatsus = new java.lang.String(); campoStatsus = jObj.campo == null ? "" : jObj.campo; campoStatsus = campoStatsus.toUpperCase(); var campoTabelaStatsus = new java.lang.String(); campoTabelaStatsus = jObj.campoTabela == null ? "" : jObj.campoTabela; campoTabelaStatsus = campoTabelaStatsus.toUpperCase(); if ( ( campoStatsus == campoConfiguracao && campoStatsus != "" && campoStatsus != null ) || ( campoTabelaStatsus == campoTabelaConfiguracao && campoTabelaStatsus != "" && campoTabelaStatsus != null) ) { lAtualizar = (jObj.campoVisivel == "ambos" || jObj.campoVisivel == "incluir" || jObj.campoVisivel == null); break; } } } else { var lAtualizar = true; } if (lAtualizar) { for (var n = 0; n < cardDataNovo.length; n++) { var campoCardDataNovo = new java.lang.String(); campoCardDataNovo = cardDataNovo[n].field == null ? "" : cardDataNovo[n].field; campoCardDataNovo = campoCardDataNovo.toUpperCase(); if (campoCardDataNovo == campoCardData) { cardData[d].value = cardDataNovo[n].value; break; } } } break; } } } var lAtualizaFilho = true; /* inicio - se for uma etapa que atualiza pai e filho deve ser avaliado se o filho foi eliminado */ if (campoCardData.indexOf("___") > -1 && cardDataNovo.length > 0 && lAtualizar == true) { lAtualizaFilho = false; for (var n = 0; n < cardDataNovo.length; n++) { if (cardDataNovo[n].field.indexOf("___") > -1) { var campoCardDataNovo = new java.lang.String(); campoCardDataNovo = cardDataNovo[n].field == null ? "" : cardDataNovo[n].field; campoCardDataNovo = campoCardDataNovo.toUpperCase(); if (campoCardData == campoCardDataNovo) { lAtualizaFilho = true; break; } } } } /* fim - se for uma etapa que atualiza pai e filho deve ser avaliado se o filho foi eliminado */ if (lAtualizaFilho == true){ var cField = DatasetFactory.createConstraint("field", JSON.stringify(cardData[d]), "", ConstraintType.MUST); constr.push(cField); } } /* inicio -- exclusivo para pai e filho - campos novos que nao estao no carddata do paixfilho */ for (var n = 0; n < cardDataNovo.length; n++) { if (cardDataNovo[n].field.indexOf("___") > -1) { var campoCardDataNovo = new java.lang.String(); campoCardDataNovo = cardDataNovo[n].field == null ? "" : cardDataNovo[n].field; campoCardDataNovo = campoCardDataNovo.toUpperCase(); var lNovoFilho = true; /* verifica se e um novo filho */ for (var d = 0; d < cardData.length; d++) { if (cardData[d].field.indexOf("___") > -1) { var campoCardData = new java.lang.String(); campoCardData = cardData[d].field == null ? "" : cardData[d].field; campoCardData = campoCardData.toUpperCase(); if (campoCardDataNovo == campoCardData) /* se achou o registro ele ja foi atualizado no laco acima */ { lNovoFilho = false; break; } } } if (lNovoFilho == true){ for (var c = 0; c < dsCampos.rowsCount; c++) { if (dsCampos.getValue(c, "campoTabela") != "" && dsCampos.getValue(c, "campoTabela") != null){ var campoTabelaConfiguracao = new java.lang.String(); campoTabelaConfiguracao = dsCampos.getValue(c, "campoTabela") == null ? "" : dsCampos.getValue(c, "campoTabela"); campoTabelaConfiguracao = campoTabelaConfiguracao.toUpperCase(); if (campoCardDataNovo.indexOf(campoTabelaConfiguracao) > -1) { var lAtualizar = false; /* caso tenha um status sendo passado serão utilizados os parametros de campos do stado*/ if (cStatus != "" && cStatus != null) { for (var a = 0; a < camposStatus.length; a++) { var jObj = camposStatus[a]; var campoTabelaStatsus = new java.lang.String(); campoTabelaStatsus = jObj.campoTabela == null ? "" : jObj.campoTabela; campoTabelaStatsus = campoTabelaStatsus.toUpperCase(); if (campoTabelaStatsus == campoTabelaConfiguracao && campoTabelaStatsus != "" && campoTabelaStatsus != null) { lAtualizar = (jObj.campoVisivel == "ambos" || jObj.campoVisivel == "incluir" || jObj.campoVisivel == null); break; } } } else { if (dsCampos.getValue(c, "campoVisivel") == "incluir" || dsCampos.getValue(c, "campoVisivel") == "ambos" || dsCampos.getValue(c, "campoVisivel") == null){ var lAtualizar = true; } } if (lAtualizar) { var cField = DatasetFactory.createConstraint("field", JSON.stringify(cardDataNovo[n]), "", ConstraintType.MUST); constr.push(cField); } break; } } } } } } /* fim -- exclusivo para pai e filho - campos novos que nao estao no carddata do paixfilho */ for (var i = 0; i < attachments.length; i++) { var cAttach = DatasetFactory.createConstraint("attachment", JSONUtil.toJSON(attachments[i]), "", ConstraintType.MUST); constr.push(cAttach); } log.info("Digte Public Form - ======Chamada ds_dpf_saveAndSendTaskSoap"); var saveAndSendTaskSoap = DatasetFactory.getDataset("ds_dpf_saveAndSendTaskSoap", null, constr, null); if (saveAndSendTaskSoap != null && saveAndSendTaskSoap != undefined && saveAndSendTaskSoap.rowsCount > 0) { if (saveAndSendTaskSoap.getValue(0, "message") != undefined) { var message = saveAndSendTaskSoap.getValue(0, "message"); dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-' + userLocale] + " (" + message + ")" ]); return dataset; } else if (saveAndSendTaskSoap.getValue(0, "iTask") != undefined) { /* GRAVANDO HISTÓRICO O PROCESSO NOS COMENTARIOS PARA REGISTRASR ETAPAS DO PUBLIC FORM*/ var observacao = "Etapa:" + cStatus + " ### Desrição Etapa:" + cStatusDescricao + " ### " + "Jornada:" + jornada + " ### Descrição Jornada:" + jornadaDescricao + ""; var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserP = DatasetFactory.createConstraint("userPost", userSolicitante, "", ConstraintType.MUST), cThread = DatasetFactory.createConstraint("threadSequence", threadSequence, "", ConstraintType.MUST), cObs = DatasetFactory.createConstraint("observacao", observacao, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), cLocale = DatasetFactory.createConstraint("userLocale", userLocale, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserP, cThread, cObs, cURL, cLocale); var dsSetTasksCommentsSoap = DatasetFactory.getDataset("ds_dpf_setTasksCommentsSoap", null, constr, null); if (dsSetTasksCommentsSoap != null && dsSetTasksCommentsSoap != undefined && dsSetTasksCommentsSoap.rowsCount > 0) { if (dsSetTasksCommentsSoap.getValue(0, "result") != undefined) { if (dsSetTasksCommentsSoap.getValue(0, "result") == "OK") { log.info("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ SUCESSO NA GRAVAÇÃO DO COMPLEMENTO DO PROCESSO >>>> " + processInstanceId); } else { log.info("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ ERRO NA GRAVAÇÃO DO COMPLEMENTO DO PROCESSO >>>> " + dsSetTasksCommentsSoap.getValue(0, "result")); } } } /* GRAVANDO HISTÓRICO O PROCESSO NOS COMENTARIOS PARA REGISTRASR ETAPAS DO PUBLIC FORM*/ /* Movimenta Anexos para a pasta */ if (cStatus != "" && cStatus != null && dsAnexoStatus != null && dsAnexoStatus != undefined && dsAnexoStatus.rowsCount > 0){ /* documentos eliminados do processo precisam ser eliminado do GED */ for (var i = 0; i < attachments.length; i++) { if (attachments[i].deleted == true){ try{ var docDto = docAPI.getDocumentVersion(attachments[i].documentId, attachments[i].version); var iDocumentType = docDto.getDocumentType(); if (iDocumentType == 2) { fluigAPI.getDocumentService().deleteDocument(attachments[i].documentId); } } catch(e){ log.error("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ Problemas na eliminacao documentos do processo:" + e); } } } var cCompanyId = DatasetFactory.createConstraint("processAttachmentPK.companyId", company, company, ConstraintType.MUST); var cProcessInstanceId = DatasetFactory.createConstraint("processAttachmentPK.processInstanceId", processInstanceId, processInstanceId, ConstraintType.MUST); var dsAnexoSolicitacao = DatasetFactory.getDataset("processAttachment", null, [cCompanyId,cProcessInstanceId], null); if (dsAnexoSolicitacao != undefined && dsAnexoSolicitacao != null && dsAnexoSolicitacao.rowsCount > 0) { for (var a = 0; a < dsAnexoSolicitacao.rowsCount; a++) { var iDocumentoId = parseInt(dsAnexoSolicitacao.getValue(a, "documentId")); var iVersion = parseInt(dsAnexoSolicitacao.getValue(a, "version")); var iDocumentType = 0; try { var docDto = docAPI.getDocumentVersion(iDocumentoId, iVersion); iDocumentType = docDto.getDocumentType(); } catch(e){ log.error("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ Problemas em acessar os anexos do processo:" + e); } if (iDocumentType == 7) { var cfileName = docDto.getPhisicalFile(); var cAnexoCampoNomePasta = ""; var cAnexoCampoNomeSubpasta = ""; for (var j = 0; j < dsAnexoStatus.rowsCount; j++) { if ( cfileName.indexOf("___CODDOC_" + dsAnexoStatus.getValue(j, "tipoDocumentoCodigo") + "___") > -1 && dsAnexoStatus.getValue(j, "anexoPastaRaizIdDocument") != "null" && dsAnexoStatus.getValue(j, "anexoPastaRaizIdDocument") != null && dsAnexoStatus.getValue(j, "anexoPastaRaizIdDocument") != ""){ if (dsAnexoStatus.getValue(j, "uploadStatus") == true){ var lAchou = false; for (var iattach = 0; iattach < attachments.length; iattach++) { if (attachments[iattach].fileName.indexOf("___CODDOC_" + dsAnexoStatus.getValue(j, "tipoDocumentoCodigo") + "___")){ lAchou = true; } } if (lAchou == false) /* se o anexo nao foi enviado novametne ir para proximo */ { continue; } } for (var c = 0; c < cardData.length; c++) { var campoCardData = new java.lang.String(); campoCardData = cardData[c].field == null ? "" : cardData[c].field; campoCardData = campoCardData.toUpperCase(); var campoPasta = new java.lang.String(); campoPasta = dsAnexoStatus.getValue(j, "anexoCampoNomePasta") == null ? "" : dsAnexoStatus.getValue(j, "anexoCampoNomePasta"); campoPasta = campoPasta.toUpperCase(); var campoSubPasta = new java.lang.String(); campoSubPasta = dsAnexoStatus.getValue(j, "anexoCampoNomeSubpasta") == null ? "" : dsAnexoStatus.getValue(j, "anexoCampoNomeSubpasta"); campoSubPasta = campoSubPasta.toUpperCase(); if (campoCardData == campoPasta) { cAnexoCampoNomePasta = cardData[c].value; } if (campoCardData == campoSubPasta) { cAnexoCampoNomeSubpasta = cardData[c].value; } } /* inicio - ciar pasta do anexo baseada em campo do formulario */ var iParentDocumentId = 0; if (cAnexoCampoNomePasta != "" && cAnexoCampoNomePasta != null && cAnexoCampoNomePasta != "null"){ iParentDocumentId = getFolderAndDocumentbyName(cAnexoCampoNomePasta,"1",dsAnexoStatus.getValue(j, "anexoPastaRaizIdDocument"), company); if (iParentDocumentId == -1){ try { var dtoFolder = docAPI.newDocumentDto(); iParentDocumentId = parseInt(dsAnexoStatus.getValue(j, "anexoPastaRaizIdDocument")); dtoFolder.setDocumentDescription(cAnexoCampoNomePasta); dtoFolder.setDocumentType("1"); dtoFolder.setParentDocumentId(iParentDocumentId); dtoFolder.setDocumentTypeId(""); var folder = docAPI.createFolder(dtoFolder, null, null); iParentDocumentId = folder.getDocumentId(); } catch (e) { log.error("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ Problemas na criação da pasta do anexo:" + e); } } if (cAnexoCampoNomeSubpasta != "" && cAnexoCampoNomeSubpasta != null && cAnexoCampoNomeSubpasta != "null"){ var iPastaCampo = iParentDocumentId; iParentDocumentId = getFolderAndDocumentbyName(cAnexoCampoNomeSubpasta,"1",iPastaCampo, company); if (iParentDocumentId == -1){ try { var dtoFolder = docAPI.newDocumentDto(); iParentDocumentId = parseInt(iPastaCampo); dtoFolder.setDocumentDescription(cAnexoCampoNomeSubpasta); dtoFolder.setDocumentType("1"); dtoFolder.setParentDocumentId(iParentDocumentId); dtoFolder.setDocumentTypeId(""); var folder = docAPI.createFolder(dtoFolder, null, null); iParentDocumentId = folder.getDocumentId(); } catch (e) { log.error("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ Problemas na criação da subpasta do anexo:" + e); } } } } else{ /* caso nao tenha pasta padrão irá para pastas raiz*/ iParentDocumentId = parseInt(dsAnexoStatus.getValue(j, "anexoPastaRaizIdDocument")); } /* fim - ciar pasta do anexo baseada em campo do formulario */ /* inicio - ciar pasta especifica para o anexo com o nome do anexo */ if ( ( dsAnexoStatus.getValue(j, "criarSubPasta") == "sim" || dsAnexoStatus.getValue(j, "criarSubPasta") == "simGrupoAnexo") && iParentDocumentId != 0) { var cNomeSubPasta = dsAnexoStatus.getValue(j, "criarSubPasta") == "sim" ? dsAnexoStatus.getValue(j, "anexoDescricao") : dsAnexoStatus.getValue(j, "anexoNome"); /* caso nao tenha conteudo no grupo de anexo usar nome do anexo */ var cNomeSubPasta = cNomeSubPasta == null || cNomeSubPasta == "" ? dsAnexoStatus.getValue(j, "anexoDescricao") : cNomeSubPasta; if (cNomeSubPasta != null && cNomeSubPasta != ""){ var iParentDocumentIdAnexo = getFolderAndDocumentbyName(cNomeSubPasta,"1",iParentDocumentId, company); if (iParentDocumentIdAnexo == -1){ try { var dtoFolder = docAPI.newDocumentDto(); dtoFolder.setDocumentDescription(cNomeSubPasta); dtoFolder.setDocumentType("1"); dtoFolder.setParentDocumentId(iParentDocumentId); dtoFolder.setDocumentTypeId(""); dtoFolder.setInheritSecurity(true); var folder = docAPI.createFolder(dtoFolder, null, null); iParentDocumentId = folder.getDocumentId(); } catch (e) { log.error("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ Problemas na criação da subpasta do anexo:" + e); } } else { iParentDocumentId = iParentDocumentIdAnexo; } } } /* fim - ciar pasta especifica para o anexo com o nome do anexo */ /* inicio - verificar expiracao e validade do anexo ex 1___CODDOC_rg-verso___2020-5-8-12-18-40-299 */ var docName = cfileName; var tipoDocumentoCodigo = ""; docName = docName.substring(docName.indexOf("___CODDOC_") + 10); docName = docName.substring(0, docName.indexOf("___")); tipoDocumentoCodigo = docName; var lExpira = false; var qtDiasValidade = 0; var validationStartDate = 0; var notificationDays = 0; var today = new Date(); var expirationDate = new Date(); /* busca nome gravado - admissao digital - contratos esta fora do cadastro */ var nomeAnexoTipoDocumento = dsAnexoStatus.getValue(j,"tipoDocumentoNome"); /* busca nome gravado - admissao digital - contratos esta fora do cadastro */ var nomeAnexo = dsAnexoStatus.getValue(j,"anexoDescricao") == "" || dsAnexoStatus.getValue(j,"anexoDescricao") == null ? cfileName : dsAnexoStatus.getValue(j,"anexoDescricao"); nomeAnexo = (dsAnexoStatus.getValue(j, "criarSubPasta") == "sim") && nomeAnexoTipoDocumento != null ? nomeAnexoTipoDocumento : nomeAnexo; var c1 = DatasetFactory.createConstraint("tipoDocumentoCodigo", tipoDocumentoCodigo, tipoDocumentoCodigo, ConstraintType.MUST); var dsTipodocumento = DatasetFactory.getDataset("dpf_tipo_documento", null, [c1], null); if (dsTipodocumento != undefined && dsTipodocumento != null && dsTipodocumento.rowsCount > 0) { lExpira = dsTipodocumento.getValue(0, "expira") == "sim" ? true : false; qtDiasValidade = dsTipodocumento.getValue(0, "qtDiasValidade") != "" && dsTipodocumento.getValue(0, "qtDiasValidade") != "0" ? parseInt(dsTipodocumento.getValue(0, "qtDiasValidade")) : 1; /* se tiver expiração precisa ser 1 dia pelo menos */ notificationDays = dsTipodocumento.getValue(0, "qtDiasNotificacao") != "" && dsTipodocumento.getValue(0, "qtDiasNotificacao") != "0" ? parseInt(dsTipodocumento.getValue(0, "qtDiasNotificacao")) : 0; validationStartDate = java.util.Calendar.getInstance().getTime(); expirationDate.setDate(today.getDate() + qtDiasValidade); /* se tiver subpasta para o anexo - será utilizado o nome do tipo de docummentos - trata caso de documentos ficarem na mesma pasta */ nomeAnexoTipoDocumento = dsTipodocumento.getValue(0, "tipoDocumentoNome") == "" || dsTipodocumento.getValue(0, "tipoDocumentoNome") == null ? cfileName : dsTipodocumento.getValue(0, "tipoDocumentoNome"); nomeAnexo = (dsAnexoStatus.getValue(j, "criarSubPasta") == "sim") ? nomeAnexoTipoDocumento : nomeAnexo; } /* inicio - verificar expiracao e validade do anexo */ /* inicio - ciar documento do anexo */ try{ docAPI.copyDocumentToUploadArea(iDocumentoId, iVersion); } catch(e){ log.error("Digte Public Form - @@@@@@@@@@@@@@@@@@@@@@ Problemas no upload da pasta temporaria" + e); } var iPastaAnexo = parseInt(dsAnexoSolicitacao.getValue(a, "version")); var iDocumentIdAnexo = getFolderAndDocumentbyName(dsAnexoStatus.getValue(j, "anexoDescricao"),"2",iParentDocumentId, company); docDto.setParentDocumentId(iParentDocumentId); var attachArray = new java.util.ArrayList(); var mainAttach = docAPI.newAttachment(); mainAttach.setFileName(docDto.getPhisicalFile()); mainAttach.setPrincipal(true); mainAttach.setAttach(false); attachArray.add(mainAttach); docDto.setActiveVersion(true); docDto.setDocumentDescription(nomeAnexo); docDto.setInheritSecurity(true); docDto.setInternalVisualizer(true); docDto.setColleagueId(getValue("WKUser")); docDto.setPublisherId(getValue("WKUser")); if (lExpira == true){ docDto.setExpires(true); docDto.setValidationStartDate(validationStartDate); docDto.setExpirationDate(expirationDate); } try { var doc = docAPI.createDocument(docDto, attachArray, null, null,null); } catch (e) { log.error("Problemas na criação do documento:" + e); } /* fim - ciar documento do anexo */ } } } } } } /* Movimenta Anexos para a pasta */ /* inicio - definir prazo da próxima atividade */ if (newDueDate != null){ log.info("Digte Public Form - ======Chamada ds_dpf_setDueDateSoap - newDueDate:" + newDueDate); var timeInSecods = (newDueDate.getHours()*60*60)+(newDueDate.getMinutes()*60)+newDueDate.getSeconds(); var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPCode = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserS = DatasetFactory.createConstraint("userSolicitante", userSolicitante, "", ConstraintType.MUST), cThread = DatasetFactory.createConstraint("threadSequence", threadSequence, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), cLocale = DatasetFactory.createConstraint("userLocale", userLocale, "", ConstraintType.MUST), cDueDate = DatasetFactory.createConstraint("dueDate", formatDate(newDueDate), "", ConstraintType.MUST), cTimeInSecods = DatasetFactory.createConstraint("timeInSecods", timeInSecods , "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPCode, cUserS, cThread, cURL, cLocale,cDueDate,cTimeInSecods); var saveAndSendTaskSoap = DatasetFactory.getDataset("ds_dpf_setDueDateSoap", null, constr, null); if (saveAndSendTaskSoap != null && saveAndSendTaskSoap != undefined && saveAndSendTaskSoap.rowsCount > 0) { if (saveAndSendTaskSoap.getValue(0, "message") != undefined) { var message = saveAndSendTaskSoap.getValue(0, "message"); dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-' + userLocale] + " (" + message + ")" ]); return dataset; } } } /* fim - definir prazo da próxima atividade */ dataset.addColumn("message"); dataset.addColumn("solicitacao"); dataset.addColumn("solicitacaoCode"); dataset.addColumn("targetTypeInsert"); dataset.addColumn("urlView"); dataset.addColumn("codStatusDestino"); dataset.addColumn("urlInsertTarget"); dataset.addColumn("urlCustomizedTarget"); dataset.addColumn("conclusionMessage"); var cMensagem = objLocale['saveAndSendTaskSoap-message-sucesso-' + userLocale]; /* Encode codStatus */ if (cStatusDestino != "") { var str = new java.lang.String(cStatusDestino); var cStatusDestinoAsB64 = java.util.Base64.getEncoder().encodeToString(str.getBytes("utf-8")); } /* Encode codStatus */ dataset.addRow([cMensagem, processInstanceId , processInstanceIdCode, enviarParaTelaConsulta, telaConsultaURL, cStatusDestinoAsB64,cUrlInsertTarget,paginaCustomizadaURL,mensagemConclusao]); return dataset; } } else { dataset.addColumn("message"); dataset.addRow([objLocale['saveAndSendTaskSoap-message-falha-' + userLocale]]); return dataset; } } log.info("Digte Public Form - @@@ Fim Dataset ds_dpf_movimentarSolicitacao.js"); return dataset; } function valorCondicaoEtapa(campoForm,valorForm,campo,operacao,valor){ if (campoForm == campo && campo != null && campo != "") { if (operacao == "maior"){ if (!isNaN(valor) && !isNaN(valorForm)){ /* os dois somente tem numeros */ var fValor = parseFloat(valor); var fValorForm = parseFloat(valorForm); return (fValorForm > fValor); } else { return (valorForm > valor); } } if (operacao == "maiorIgual"){ if (!isNaN(valor) && !isNaN(valorForm)){ /* os dois somente tem numeros */ var fValor = parseFloat(valor); var fValorForm = parseFloat(valorForm); return (fValorForm >= fValor); } else { return (valorForm >= valor); } } if (operacao == "menor"){ if (!isNaN(valor) && !isNaN(valorForm)){ /* os dois somente tem numeros */ var fValor = parseFloat(valor); var fValorForm = parseFloat(valorForm); return (fValorForm < fValor); } else { return (valorForm < valor); } } if (operacao == "menorIgual"){ if (!isNaN(valor) && !isNaN(valorForm)){ /* os dois somente tem numeros */ var fValor = parseFloat(valor); var fValorForm = parseFloat(valorForm); return (fValorForm <= fValor); } else { return (valorForm <= valor); } } if (operacao == "igual"){ return (valorForm == valor); } if (operacao == "diferente"){ return (valorForm != valor); } if (operacao == "contem"){ return (valorForm.indexOf(valor) > -1); } if (operacao == "naoContem"){ return (valorForm.indexOf(valor) == -1); } if (operacao == "estaContido"){ var items = valor.split(";"); for (var j = 0; j < items.length; j++) { if (items[j] == valorForm) return true; } return false; } if (operacao == "naoEstaContido"){ var items = valor.split(";"); for (var j = 0; j < items.length; j++) { if (items[j] == valorForm) return false; } return true; } } else return true; } function loadCardData(user, password, company, processInstanceId, serverUrl, userSolicitante) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserId = DatasetFactory.createConstraint("userId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserId, cURL); var dsGetInstanceCardDataSoap = DatasetFactory.getDataset("ds_dpf_getInstanceCardDataSoap", null, constr, null); var cardData = []; if (dsGetInstanceCardDataSoap != null && dsGetInstanceCardDataSoap != undefined && dsGetInstanceCardDataSoap.rowsCount > 0) { if (dsGetInstanceCardDataSoap.getValue(0, "field") != undefined) { for (var i = 0; i < dsGetInstanceCardDataSoap.rowsCount; i++) { cardData.push({'field': dsGetInstanceCardDataSoap.getValue(i, "field") + '', 'value': dsGetInstanceCardDataSoap.getValue(i, "value") + ''}); } } } return cardData; } function getThreadSequence(user, password, company, processInstanceId, stateSequence, serverUrl) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cState = DatasetFactory.createConstraint("stateSequence", stateSequence, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cState, cURL); var dsGetActualThreadSoap = DatasetFactory.getDataset("ds_dpf_getActualThreadSoap", null, constr, null); if (dsGetActualThreadSoap != null && dsGetActualThreadSoap != undefined && dsGetActualThreadSoap.rowsCount > 0) { if (dsGetActualThreadSoap.getValue(0, "actualThread") != undefined) { return dsGetActualThreadSoap.getValue(0, "actualThread"); } else { return -1; } } } function getState(user, password, company, processInstanceId, serverUrl, userSolicitante) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserId = DatasetFactory.createConstraint("userId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserId, cURL); var dsGetAllActiveStatesSoap = DatasetFactory.getDataset("ds_dpf_getAllActiveStatesSoap", null, constr, null); if (dsGetAllActiveStatesSoap != null && dsGetAllActiveStatesSoap != undefined && dsGetAllActiveStatesSoap.rowsCount > 0) { if (dsGetAllActiveStatesSoap.getValue(0, "state") != undefined) { return dsGetAllActiveStatesSoap.getValue(0, "state"); } else { return -1; } } } function uploadToAreaUser(user, password, company, newDocumentId, newDocumentVersion, userSolicitante, serverUrl) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cDoc = DatasetFactory.createConstraint("documentId", newDocumentId, "", ConstraintType.MUST), cVersion = DatasetFactory.createConstraint("version", newDocumentVersion, "", ConstraintType.MUST), cColleague = DatasetFactory.createConstraint("colleagueId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cDoc, cVersion, cColleague, cURL); var dsCopy = DatasetFactory.getDataset("ds_dpf_copyDocumentToUploadAreaSoap", null, constr, null); if (dsCopy != null && dsCopy != undefined && dsCopy.rowsCount > 0) { if (dsCopy.getValue(0, "fileName") != undefined) { return dsCopy.getValue(0, "fileName"); } else { return -1; } } } function getTempImgFolder(idFormularioConfiguracoes, company) { var idPastaConfiguracoes = getParentDocumentId(idFormularioConfiguracoes, company); var cParentDocumentId = DatasetFactory.createConstraint("parentDocumentId", idPastaConfiguracoes, idPastaConfiguracoes, ConstraintType.MUST); var cCompany = DatasetFactory.createConstraint("documentPK.companyId", company, company, ConstraintType.MUST); var cActive = DatasetFactory.createConstraint("activeVersion", "true", "true", ConstraintType.MUST); var cDocumentType = DatasetFactory.createConstraint("documentType", "1", "1", ConstraintType.MUST); var dsDocument = DatasetFactory.getDataset("document", ["documentPK.documentId"], [cParentDocumentId, cCompany, cActive, cDocumentType], null); if (dsDocument != null && dsDocument != undefined && dsDocument.rowsCount > 0) { var tempUploadFolder = dsDocument.getValue(0, "documentPK.documentId") + ""; } else { var tempUploadFolder = -1; } return tempUploadFolder; } function getFolderAndDocumentbyName(pName, pDocumentType, pParentDocumentId, pCompany) { var cDescription = DatasetFactory.createConstraint("documentDescription", pName, pName, ConstraintType.MUST); var cParentDocumentId = DatasetFactory.createConstraint("parentDocumentId", pParentDocumentId, pParentDocumentId, ConstraintType.MUST); var cCompany = DatasetFactory.createConstraint("documentPK.companyId", pCompany, pCompany, ConstraintType.MUST); var cDocumentType = DatasetFactory.createConstraint("documentType", pDocumentType, pDocumentType, ConstraintType.MUST); var cActive = DatasetFactory.createConstraint("activeVersion", "true", "true", ConstraintType.MUST); var dsDocument = DatasetFactory.getDataset("document", ["documentPK.documentId"], [cDescription,cParentDocumentId, cCompany, cActive, cDocumentType], null); if (dsDocument != null && dsDocument != undefined && dsDocument.rowsCount > 0) { var iFolderDocumentId = parseInt(dsDocument.getValue(0, "documentPK.documentId") + ""); } else { var iFolderDocumentId = -1; } return iFolderDocumentId; } function getParentDocumentId(documentPkId, company) { var cDocumentId = DatasetFactory.createConstraint("documentPK.documentId", documentPkId, documentPkId, ConstraintType.MUST); var cCompany = DatasetFactory.createConstraint("documentPK.companyId", company, company, ConstraintType.MUST); var cActive = DatasetFactory.createConstraint("activeVersion", "true", "true", ConstraintType.MUST); var dsDocument = DatasetFactory.getDataset("document", ["parentDocumentId"], [cDocumentId, cCompany, cActive], null); if (dsDocument != null && dsDocument != undefined && dsDocument.rowsCount > 0) { var parentDocumentId = dsDocument.getValue(0, "parentDocumentId") + ""; } log.info("Digte Public Form - @@ documentPkId: " + documentPkId); log.info("Digte Public Form - @@ parentDocumentId: " + parentDocumentId); return parentDocumentId; } function formatDate(date) { var d = new Date(date), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(); if (month.length < 2) month = '0' + month; if (day.length < 2) day = '0' + day; return [year, month, day].join('-'); } var objLocale = { 'saveAndSendTaskSoap-message-falha-pt_BR': 'Erro - Problema ao movimentar a solicitação', 'saveAndSendTaskSoap-message-falha-en_US': 'Failed to complete the task', 'saveAndSendTaskSoap-message-falha-es': 'Error al movimentar la solicitación', 'saveAndSendTaskSoap-message-falha-Concluida-pt_BR': 'Erro - Atividade já foi concluída', 'saveAndSendTaskSoap-message-falha-Concluida-en_US': 'Error - Task is finished', 'saveAndSendTaskSoap-message-falha-Concluida-es': 'Error - Actividad ya cerrada', 'saveAndSendTaskSoap-message-falha-TempUpload-pt_BR': 'Erro - Pasta Temporária Digte Temp Upload não foi encontrada', 'saveAndSendTaskSoap-message-falha-TempUpload-en_US': 'Error - Temporary folder Digte Temp Upload was not found', 'saveAndSendTaskSoap-message-falha-TempUpload-es': 'Error - No se encontró la carpeta temporal Digte Temp Upload', 'saveAndSendTaskSoap-message-falha-atividade-ja-concluidada-pt_BR': 'Erro - Ativiade já concluída', 'saveAndSendTaskSoap-message-falha-atividade-ja-concluidada-en_US': 'Error - Task is completed', 'saveAndSendTaskSoap-message-falha-atividade-ja-concluidada-es': 'Error - Actividad ya completada', 'saveAndSendTaskSoap-message-falha-Falta-Anexo-pt_BR': 'Erro - Anexo obrigatório não foi enviado - Anexo: ' , 'saveAndSendTaskSoap-message-falha-Falta-Anexo-en_US': 'Error - Attachment dont send it - Attachment: ', 'saveAndSendTaskSoap-message-falha-Falta-Anexo-es': 'Error - Adjunto no fue envidado - Adjunto: ', 'saveAndSendTaskSoap-message-sucesso-pt_BR': 'Sucesso ao movimentar a solicitação', 'saveAndSendTaskSoap-message-sucesso-en_US': 'Success while complete the task', 'saveAndSendTaskSoap-message-sucesso-es': 'Éxito al movimentar la solicitación', }