function createDataset(fields, constraints, sortFields) { log.info("Digte Public Form - @@@ Inicio Dataset ds_dpf_listaCamposConfiguracao.js"); var dataset = DatasetBuilder.newDataset(); var codigoFormularioPublico = ""; var user = ""; var password = ""; var company = getValue("WKCompany"); var processInstanceId = ""; var atividadeDestino = ""; var userSolicitante = ""; var serverUrl = ""; var userLocale = 'pt_BR'; var isIdentityEnabled = ""; var cStatus = ""; var processInstanceIdCode = ""; var cardData = []; var camposStatus = []; var cValorCampoForm = ""; var cGravacao = ""; var cCampoVisivel = ""; var cTipo =""; if (constraints != null && constraints.length > 0) { for (var i = 0; i < constraints.length; i++) { if (constraints[i].fieldName == "co" && constraints[i].initialValue != "") { codigoFormularioPublico = constraints[i].initialValue; } else if (constraints[i].fieldName == "su" && constraints[i].initialValue != "") { serverUrl = constraints[i].initialValue; } else if (constraints[i].fieldName == "pi" && constraints[i].initialValue != "") { processInstanceIdCode = constraints[i].initialValue; } else if (constraints[i].fieldName == "co" && constraints[i].initialValue != "") { codigoFormularioPublico = constraints[i].initialValue; } else if (constraints[i].fieldName == "uo" && constraints[i].initialValue != "") { cUserOauth = constraints[i].initialValue; } else if (constraints[i].fieldName == "userLocale" && constraints[i].initialValue != "") { userLocale = constraints[i].initialValue; } else if (constraints[i].fieldName == "isIdentityEnabled" && constraints[i].initialValue != "") { isIdentityEnabled = constraints[i].initialValue; } else if (constraints[i].fieldName == "st" && constraints[i].initialValue != "") { cStatus = constraints[i].initialValue; } else if (constraints[i].fieldName == "tipo" && constraints[i].initialValue != "") { cTipo = constraints[i].initialValue; } } if (codigoFormularioPublico != "") { var cCodForm = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var dsConfig = DatasetFactory.getDataset("dpf_configuracoes", null, [cCodForm], null); if (dsConfig != undefined && dsConfig != null && dsConfig.rowsCount > 0) { /* tratamento para buscar valor dos campos se for uma movimentacao */ var atividadeCorrente = 0; var cProcessId = dsConfig.getValue(0, "codigoProcesso"); var lAtividadeCorrenteOk = true; var statusCorrente = ""; var statusCorrenteNome = ""; var statusUrlNome = ""; var statusCorrenteBase64 = ""; var solicitacaoFechada = false; if (cStatus != "" && cStatus != null) { /* gera codigo desencriptado da status */ var aux = new java.lang.String(cStatus); try { var asBytes = java.util.Base64.getDecoder().decode(aux); var cStatus = new java.lang.String(asBytes, "utf-8"); } catch (e) { var cStatus = aux; } } if (processInstanceIdCode != "" && processInstanceIdCode != null ) /* caso seja uma movimentacao de uma solicitacao existente */ { userSolicitante = dsConfig.getValue(0, "userStartProcessMatricula") + ""; var valor = dsConfig.getValue(0, "senhaStartProcess") + ""; var str = new java.lang.String(valor); var asBytes = java.util.Base64.getDecoder().decode(str); password = new java.lang.String(asBytes, "utf-8"); user = dsConfig.getValue(0, "userStartProcessLogin") + ""; /* gera codigo desencriptado da solicitação */ var cString = DatasetFactory.createConstraint("stringValue", processInstanceIdCode, processInstanceIdCode, ConstraintType.MUST); var dsDecode = DatasetFactory.getDataset("ds_dpf_converter_string_to_base64", null, [cString], null); var processInstanceId = 0; if (dsDecode != undefined && dsDecode != null && dsDecode.rowsCount > 0) { processInstanceId = dsDecode.getValue(0, "decoded"); } atividadeCorrente = getState(user, password, company, processInstanceId, serverUrl, userSolicitante); if (atividadeCorrente == -1) { solicitacaoFechada = true; } /* somente irá ler carddata se tiver etapa e se estiver aberta - isto para nao expor dados indevidadmente */ if ( solicitacaoFechada == false && cStatus != "" && cStatus != null) { cardData = loadCardData(user, password, company, processInstanceId, serverUrl, userSolicitante); } /* somente irá ler carddata se tiver etapa no parametor - isto para nao expor dados indevidadmente */ var consCodigoFormularioPublico = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var dsStatus = DatasetFactory.getDataset("dpf_cadastro_status", null, [consCodigoFormularioPublico], ["atividadeOrdem"]); if (dsStatus != null && dsStatus != undefined && dsStatus.rowsCount > 0) { var lStatusDestino = false; for ( var iStatus = 0; iStatus < dsStatus.rowsCount; iStatus++) { var lAtividadeCorrenteCampos = false; var documentIdStatus = dsStatus.getValue(iStatus, "metadata#id"); var documentVersionStatus = dsStatus.getValue(iStatus, "metadata#version"); var c1 = DatasetFactory.createConstraint("tablename", "tbAtividade" ,"tbAtividade", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdStatus, documentIdStatus, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionStatus, documentVersionStatus, ConstraintType.MUST); var c4 = DatasetFactory.createConstraint("atividadeId", atividadeCorrente, atividadeCorrente, ConstraintType.MUST); var c5 = DatasetFactory.createConstraint("tipoEtapa", "privado", "privado", ConstraintType.MUST_NOT); var constraintsFilhos = new Array(c1, c2, c3, c4, c5); var datasetFilhos = DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, null); /* verifica se o status é da atividade corrente */ if (datasetFilhos != null && datasetFilhos != undefined && datasetFilhos.rowsCount > 0){ if (cStatus == "" || cStatus == null) /* nao for passa estatus buscar a primera etapa correspondente a atividade bpm corrente */ { statusCorrente = statusCorrente == "" ? dsStatus.getValue(iStatus, "atividadeOrdem") : statusCorrente; statusCorrenteNome = statusCorrenteNome == "" ? dsStatus.getValue(iStatus, "descricao") : statusCorrenteNome; lAtividadeCorrenteCampos = true; } else { statusCorrente = statusCorrente == "" ? dsStatus.getValue(iStatus, "atividadeOrdem") : statusCorrente; statusCorrenteNome = statusCorrenteNome == "" ? dsStatus.getValue(iStatus, "descricao") : statusCorrenteNome; lAtividadeCorrenteCampos == true; if (cStatus == dsStatus.getValue(iStatus, "atividadeOrdem")) { statusCorrente = dsStatus.getValue(iStatus, "atividadeOrdem"); statusCorrenteNome = dsStatus.getValue(iStatus, "descricao"); lStatusDestino = true; } } } if ( lAtividadeCorrenteCampos == true ) /* assume a etapa pela atividade atual */ { camposStatus = []; /* zerar para pegar campos somente desta etapa */ statusUrlNome = dsStatus.getValue(iStatus, "descricao"); /* envia para interface o nome da atividade enviada pelo parametro */ var c1 = DatasetFactory.createConstraint("tablename", "tbCamposStatus" ,"tbCamposStatus", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdStatus, documentIdStatus, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionStatus, documentVersionStatus, ConstraintType.MUST); var constraintsFilhos = new Array(c1, c2, c3); var datasetFilhos = DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, null); if (datasetFilhos != null && datasetFilhos != undefined && datasetFilhos.rowsCount > 0){ for (var j = 0; j < datasetFilhos.rowsCount; j++) { var campo = new java.lang.String(); campo = datasetFilhos.getValue(j, "campoStatus") == null ? "" : datasetFilhos.getValue(j, "campoStatus"); var campoTabela = new java.lang.String(); campoTabela = datasetFilhos.getValue(j, "campoTabelaStatus") == null ? "" : datasetFilhos.getValue(j, "campoTabelaStatus"); camposStatus.push({"campo": campo.toUpperCase() , "campoTabela" : campoTabela.toUpperCase(), "campoVisivel" : datasetFilhos.getValue(j, "campoVisivel") , "obrigatoriedade" : datasetFilhos.getValue(j, "obrigatoriedade") }); } } if (cStatus == "" || cStatus == null || lStatusDestino == true) /* sendo a primeira ou destino igual a status atual - parar o laço */ { break; } } } if (camposStatus.length == 0){ /* caso nao seja encontrato Etapa corrente carregar com statusDestino */ for ( var iStatus = 0; iStatus < dsStatus.rowsCount; iStatus++) { if (cStatus == dsStatus.getValue(iStatus, "atividadeOrdem")) { var documentIdStatus = dsStatus.getValue(iStatus, "metadata#id"); var documentVersionStatus = dsStatus.getValue(iStatus, "metadata#version"); statusUrlNome = dsStatus.getValue(iStatus, "descricao"); /* envia para interface o nome da atividade enviada pelo parametro */ var c1 = DatasetFactory.createConstraint("tablename", "tbCamposStatus" ,"tbCamposStatus", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentIdStatus, documentIdStatus, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersionStatus, documentVersionStatus, ConstraintType.MUST); var constraintsFilhos = new Array(c1, c2, c3); var datasetFilhos = DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, null); if (datasetFilhos != null && datasetFilhos != undefined && datasetFilhos.rowsCount > 0){ for (var j = 0; j < datasetFilhos.rowsCount; j++) { var campo = new java.lang.String(); campo = datasetFilhos.getValue(j, "campoStatus") == null ? "" : datasetFilhos.getValue(j, "campoStatus"); var campoTabela = new java.lang.String(); campoTabela = datasetFilhos.getValue(j, "campoTabelaStatus") == null ? "" : datasetFilhos.getValue(j, "campoTabelaStatus"); camposStatus.push({"campo": campo.toUpperCase() , "campoTabela" : campoTabela.toUpperCase(), "campoVisivel" : datasetFilhos.getValue(j, "campoVisivel"), "obrigatoriedade" : datasetFilhos.getValue(j, "obrigatoriedade") }); } } break; } } } } lAtividadeCorrenteOk = cStatus != "" && cStatus != null && cStatus == statusCorrente ? true : false; lAtividadeCorrenteOk = (cStatus == "" || cStatus == null) && statusCorrente != "" ? true : lAtividadeCorrenteOk; /* caso nao venha estatus assumir o status amarado a atividade correnete */ } else{ /* se for inicio com status para definri anexo e caracteristicas */ if (cStatus != "" && cStatus != null) { var consCodigoFormularioPublico = DatasetFactory.createConstraint("codigoFormularioPublico", codigoFormularioPublico, codigoFormularioPublico, ConstraintType.MUST); var consStatus = DatasetFactory.createConstraint("atividadeOrdem", cStatus, cStatus, ConstraintType.MUST); var dsStatus = DatasetFactory.getDataset("dpf_cadastro_status", null, [consCodigoFormularioPublico,consStatus], null); if (dsStatus != null && dsStatus != undefined && dsStatus.rowsCount > 0) { var documentId = dsStatus.getValue(0, "metadata#id"); var documentVersion = dsStatus.getValue(0, "metadata#version"); var c1 = DatasetFactory.createConstraint("tablename", "tbCamposStatus" ,"tbCamposStatus", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentId, documentId, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersion, documentVersion, ConstraintType.MUST); var constraintsFilhos = new Array(c1, c2, c3); /*Busca o dataset&*/ var datasetFilhos = DatasetFactory.getDataset("dpf_cadastro_status", null, constraintsFilhos, null); if (datasetFilhos != null && datasetFilhos != undefined && datasetFilhos.rowsCount > 0){ for (var j = 0; j < datasetFilhos.rowsCount; j++) { var campo = new java.lang.String(); campo = datasetFilhos.getValue(j, "campoStatus") == null ? "" : datasetFilhos.getValue(j, "campoStatus"); var campoTabela = new java.lang.String(); campoTabela = datasetFilhos.getValue(j, "campoTabelaStatus") == null ? "" : datasetFilhos.getValue(j, "campoTabelaStatus"); camposStatus.push({"campo": campo.toUpperCase(), "campoTabela" : campoTabela.toUpperCase(), "campoVisivel" : datasetFilhos.getValue(j, "campoVisivel") , "obrigatoriedade" : datasetFilhos.getValue(j, "obrigatoriedade") }); } } } } } /* tratamento para buscar valor dos campos*/ var documentId = dsConfig.getValue(0, "metadata#id"); var documentVersion = dsConfig.getValue(0, "metadata#version"); var c1 = DatasetFactory.createConstraint("tablename", "tbCamposIdentificacao", "tbCamposIdentificacao", ConstraintType.MUST); var c2 = DatasetFactory.createConstraint("metadata#id", documentId, documentId, ConstraintType.MUST); var c3 = DatasetFactory.createConstraint("metadata#version", documentVersion, documentVersion, ConstraintType.MUST); var c4 = DatasetFactory.createConstraint("metadata#active", "true", "true", ConstraintType.MUST); var constrCampos = [c1, c2, c3, c4]; var dsCampos = DatasetFactory.getDataset("dpf_configuracoes", null, constrCampos, null); dataset.addColumn("campo"); dataset.addColumn("descricaoCampo"); dataset.addColumn("campoIdentificacao"); dataset.addColumn("campoVisivel"); dataset.addColumn("gravacao"); dataset.addColumn("valor"); dataset.addColumn("campoTabela"); dataset.addColumn("atualizaValor"); dataset.addColumn("statusCorrente"); dataset.addColumn("statusCorrenteNome"); dataset.addColumn("statusUrlNome"); dataset.addColumn("solicitacaoFechada"); dataset.addColumn("obrigatoriedade"); if (statusCorrente != "") /* muda para base 64 para enviar para área publica */ { var str = new java.lang.String(statusCorrente); statusCorrenteBase64 = java.util.Base64.getEncoder().encodeToString(str.getBytes("utf-8")); } /* tratamento para forçar o erro de estar em outra etapa quando nao tem etapa cadastrada para ativiade corrente */ if ( statusCorrente == "" && lAtividadeCorrenteOk == false && processInstanceIdCode != "" && processInstanceIdCode != null) { statusCorrenteBase64 = "atividadeCorrente_Nok"; } /* tratamento para forçar o erro de estar em outra etapa quando nao tem etapa cadastrada para ativiade corrente */ if (dsCampos != undefined && dsCampos != null && dsCampos.rowsCount > 0) { CampoFor: for (var i = 0; i < dsCampos.rowsCount; i++) { /* verificar se o campo deve ter gravacao */ cValorCampoForm = ""; cGravacao = "false"; lCarregarCampos = true; cCampoVisivel = "incluir"; cObrigatoriedade = "naoObrigatorio"; if (cTipo=="campo" && (dsCampos.getValue(i,"campo") == null || dsCampos.getValue(i,"campo") == "null") ) { continue CampoFor; } if (cTipo=="campoTabela" && (dsCampos.getValue(i,"campoTabela") == null || dsCampos.getValue(i,"campoTabela") == "null") ) { continue CampoFor; } var campoConfiguracao = new java.lang.String(); campoConfiguracao = dsCampos.getValue(i,"campo") == null ? "" : dsCampos.getValue(i,"campo"); campoConfiguracao = campoConfiguracao.toUpperCase(); var campoTabelaConfiguracao = new java.lang.String(); campoTabelaConfiguracao = dsCampos.getValue(i,"campoTabela") == null ? "" : dsCampos.getValue(i,"campoTabela"); campoTabelaConfiguracao = campoTabelaConfiguracao.toUpperCase(); if (cStatus != "" && cStatus != null) /* caso tenha um status sendo passado serão utilizados os parametros de campos do stado*/ { for (var a = 0; a < camposStatus.length; a++) { var jObj = camposStatus[a]; if ((jObj.campo == campoConfiguracao && jObj.campo != null && jObj.campo != "" ) || (jObj.campoTabela == campoTabelaConfiguracao && jObj.campoTabela != null && jObj.campoTabela != "") ) { cGravacao = (jObj.campoVisivel == "ambos" || jObj.campoVisivel == "incluir") == true ? "true" : "false"; lCarregarCampos = (jObj.campoVisivel == "ambos" || jObj.campoVisivel == "incluir" || jObj.campoVisivel == "incluirLeitura"); cCampoVisivel = jObj.campoVisivel; cObrigatoriedade = jObj.obrigatoriedade; break; } } } else { /* caso nao tenha configuracao do status pegar a configuração do processo */ lCarregarCampos = (dsCampos.getValue(i, "campoVisivel") == "ambos" || dsCampos.getValue(i, "campoVisivel") == "incluir" || dsCampos.getValue(i, "campoVisivel") == "incluirLeitura"); cCampoVisivel = dsCampos.getValue(i, "campoVisivel"); cGravacao = dsCampos.getValue(i, "campoVisivel") == "ambos" || dsCampos.getValue(i, "campoVisivel") == "incluir" ? "true" : "false"; cObrigatoriedade = "naoObrigatorio"; } cGravacao = lAtividadeCorrenteOk == false ? "false" : cGravacao; /* se o nao tem proxima atividade evitar gracao para todos os campos */ if (lCarregarCampos && cardData != undefined && cardData != null && cardData.length > 0) /* carregar o campo o valor se for uma movimentacao de processo ja iniciado */ { var lEncontrouCardData = false; /* se nao estiver na atividade correte nao podem ser carregados os campos para evitar vazamento de informação */ if (lAtividadeCorrenteOk == true){ for (var d = 0; d < cardData.length; d++) { var campoCardData = new java.lang.String(); campoCardData = cardData[d].field == null ? "" : cardData[d].field; campoCardData = campoCardData.toUpperCase(); if ( (campoCardData == campoConfiguracao && campoConfiguracao != "null" && campoConfiguracao != "" && campoConfiguracao != null) || (campoCardData.indexOf(campoTabelaConfiguracao + "___") > -1 && campoTabelaConfiguracao != "null" && campoTabelaConfiguracao != "" && campoTabelaConfiguracao != null)) { var campoTabela = ""; var campo = ""; if (campoCardData.indexOf(campoTabelaConfiguracao + "___") > -1){ /* tratamento orcle - todos os campo ficam em maiuscula no webservice do cardData */ var aux = cardData[d].field; aux = aux.replace(campoTabelaConfiguracao,dsCampos.getValue(i,"campoTabela")); campoTabela = aux == null ? "" : aux; /* se for campo do tipo paixfilho atualizar o indexer */ } else { campo = cardData[d].field == null ? "" : dsCampos.getValue(i,"campo"); } cValorCampoForm = cCampoVisivel == "nao" ? "" : cardData[d].value; /* caso campo nao seja visivel nao enviar conteudo para interface */ dataset.addRow([campo, dsCampos.getValue(i, "descricaoCampo"), dsCampos.getValue(i, "campoIdentificacao"), cCampoVisivel,cGravacao,cValorCampoForm,campoTabela,"true",statusCorrenteBase64,statusCorrenteNome,statusUrlNome,solicitacaoFechada,cObrigatoriedade]); lEncontrouCardData = true; } } } /* se nao estiver na atividade correte nao podem ser carregados os campos para evitar vazamento de informação */ if (lEncontrouCardData == false) /* caso nao encontrou dados retorna o campo vazio */ { var campoTabela = dsCampos.getValue(i,"campoTabela") == null ? "" : dsCampos.getValue(i,"campoTabela"); var campo = dsCampos.getValue(i,"campo") == null ? "" : dsCampos.getValue(i,"campo"); dataset.addRow([campo, dsCampos.getValue(i, "descricaoCampo"), dsCampos.getValue(i, "campoIdentificacao"), cCampoVisivel,cGravacao,cValorCampoForm,campoTabela,"true",statusCorrenteBase64,statusCorrenteNome,statusUrlNome,solicitacaoFechada,cObrigatoriedade]); } } else /* se for somente inicio incluir os campos */ { var campoTabela = dsCampos.getValue(i,"campoTabela") == null ? "" : dsCampos.getValue(i,"campoTabela"); var campo = dsCampos.getValue(i,"campo") == null ? "" : dsCampos.getValue(i,"campo"); dataset.addRow([campo, dsCampos.getValue(i, "descricaoCampo"), dsCampos.getValue(i, "campoIdentificacao"), cCampoVisivel,cGravacao,cValorCampoForm,campoTabela,"false",statusCorrenteBase64,statusCorrenteNome,statusUrlNome,solicitacaoFechada,cObrigatoriedade]); } } } } } } log.info("Digte Public Form - @@@ Fim Dataset ds_dpf_listaCamposConfiguracao.js"); return dataset; } function getState(user, password, company, processInstanceId, serverUrl, userSolicitante) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserId = DatasetFactory.createConstraint("userId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserId, cURL); var dsGetAllActiveStatesSoap = DatasetFactory.getDataset("ds_dpf_getAllActiveStatesSoap", null, constr, null); if (dsGetAllActiveStatesSoap != null && dsGetAllActiveStatesSoap != undefined && dsGetAllActiveStatesSoap.rowsCount > 0) { if (dsGetAllActiveStatesSoap.getValue(0, "state") != undefined) { return dsGetAllActiveStatesSoap.getValue(0, "state"); } else { return -1; } } } function loadCardData(user, password, company, processInstanceId, serverUrl, userSolicitante) { var cUser = DatasetFactory.createConstraint("user", user, "", ConstraintType.MUST), cPass = DatasetFactory.createConstraint("password", password, "", ConstraintType.MUST), cComp = DatasetFactory.createConstraint("company", company, "", ConstraintType.MUST), cPInstance = DatasetFactory.createConstraint("processInstanceId", processInstanceId, "", ConstraintType.MUST), cUserId = DatasetFactory.createConstraint("userId", userSolicitante, "", ConstraintType.MUST), cURL = DatasetFactory.createConstraint("serverUrl", serverUrl, "", ConstraintType.MUST), constr = new Array(cUser, cPass, cComp, cPInstance, cUserId, cURL); var dsGetInstanceCardDataSoap = DatasetFactory.getDataset("ds_dpf_getInstanceCardDataSoap", null, constr, null); var cardData = []; if (dsGetInstanceCardDataSoap != null && dsGetInstanceCardDataSoap != undefined && dsGetInstanceCardDataSoap.rowsCount > 0) { if (dsGetInstanceCardDataSoap.getValue(0, "field") != undefined) { for (var i = 0; i < dsGetInstanceCardDataSoap.rowsCount; i++) { var field = new java.lang.String(); field = dsGetInstanceCardDataSoap.getValue(i, "field") == null ? "" : dsGetInstanceCardDataSoap.getValue(i, "field"); cardData.push({'field': field.toUpperCase() + '', 'value': dsGetInstanceCardDataSoap.getValue(i, "value") + ''}); } } } return cardData; } function retirarPorcento(valor){ valor = valor.substr(1, valor.length - 2); return valor; } function isBase64(str) { return /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/.test(str) }